import{_ as e,o,c as a,Q as r}from"./chunks/framework.a638f038.js";const f=JSON.parse('{"title":"前端监控","description":"","frontmatter":{},"headers":[],"relativePath":"web/monitor.md","filePath":"web/monitor.md"}'),l={name:"web/monitor.md"},i=r('<h1 id="前端监控" tabindex="-1">前端监控 <a class="header-anchor" href="#前端监控" aria-label="Permalink to &quot;前端监控&quot;">​</a></h1><h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><p>项目演进时功能复杂且不易不易在测试阶段及时发现潜在问题，导致线上崩溃时无法及时做出响应导致影响客户体验，遂需要一套完整的前端错误监控系统来触发报警。</p><p><code>sentry</code> 虽然功能很全面但价格也不便宜，故了解其中核心原理以便自研之需很有必要。</p><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><h3 id="异常监控" tabindex="-1">异常监控 <a class="header-anchor" href="#异常监控" aria-label="Permalink to &quot;异常监控&quot;">​</a></h3><ul><li><p>资源加载错误</p><p>使用 <code>addEventListener</code> 来监听 <code>error</code> 事件</p></li><li><p>js 运行错误</p><p>使用 <code>window.onerror</code> 来定义 <code>js</code> 异常</p></li><li><p>promise 错误</p><p>使用 <code>addEventListener</code> 来监听 <code>unhandledrejection</code> 事件，捕获未捕获的 <code>promise.reject</code> 异常</p></li><li><p>ajax、fetch 的异常</p><p>使用 <code>addEventListener</code> 来监听 <code>error</code> 或 <code>abort</code> 事件，或者重写 <code>xhr</code> 的 <code>open</code> 和 <code>send</code> 方法</p></li><li><p>vue 错误</p><p>使用 <code>Vue.config.errorHandler</code> 来捕获框架抛出的异常</p></li></ul><h3 id="用户行为监控" tabindex="-1">用户行为监控 <a class="header-anchor" href="#用户行为监控" aria-label="Permalink to &quot;用户行为监控&quot;">​</a></h3><ul><li>PV （页面浏览量） - 前端访问即算一次</li><li>UV （用户访问量） - 后端计算用户访问数</li><li>页面停留时长 - 在 <code>load</code> 和 <code>beforeunload</code> 里计算</li><li>页面访问深度 - 监听 <code>scroll</code> 事件获取滚动高度</li><li>用户点击 - 监听点击事件</li><li>页面跳转 - 监听 <code>popstate</code> 、 <code>hashchange</code> 方法</li><li>路由变化 - 在 <code>router.beforeEach</code> 中监听</li></ul><h3 id="性能数据监控" tabindex="-1">性能数据监控 <a class="header-anchor" href="#性能数据监控" aria-label="Permalink to &quot;性能数据监控&quot;">​</a></h3><ul><li>FP(first-paint)，从页面加载开始到第一个像素绘制到屏幕上的时间</li><li>FCP(first-contentful-paint)，从页面加载开始到页面内容的任何部分在屏幕上完成渲染的时间</li><li>LCP(largest-contentful-paint)，从页面加载开始到最大文本块或图像元素在屏幕上完成渲染的时间</li><li>CLS(layout-shift)，从页面加载开始和其生命周期状态变为隐藏期间发生的所有意外布局偏移的累积分数</li></ul><p>这四个性能指标都需要通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/PerformanceObserver" target="_blank" rel="noreferrer">PerformanceObserver</a> 对象来获取数据</p><h3 id="数据上报" tabindex="-1">数据上报 <a class="header-anchor" href="#数据上报" aria-label="Permalink to &quot;数据上报&quot;">​</a></h3><h4 id="上报方式" tabindex="-1">上报方式 <a class="header-anchor" href="#上报方式" aria-label="Permalink to &quot;上报方式&quot;">​</a></h4><ul><li><code>sendBeacon</code></li><li><code>xhr</code></li><li><code>image</code></li></ul><h4 id="上报时机" tabindex="-1">上报时机 <a class="header-anchor" href="#上报时机" aria-label="Permalink to &quot;上报时机&quot;">​</a></h4><ul><li><code>requestIdleCallback/setTimeout</code> 延时上报</li><li><code>beforeunload</code> 中上报</li><li>缓存池满则上报</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>暂未整理完...</p>',19),d=[i];function t(c,n,h,s,p,u){return o(),a("div",null,d)}const m=e(l,[["render",t]]);export{f as __pageData,m as default};
