import{_ as o,o as e,c as t,Q as c}from"./chunks/framework.d544cf0e.js";const P=JSON.parse('{"title":"HTTP/0.9/1.0/1.1/2/3","description":"","frontmatter":{},"headers":[],"relativePath":"http/http.md","filePath":"http/http.md","lastUpdated":1692961506000}'),d={name:"http/http.md"},a=c('<h1 id="http-0-9-1-0-1-1-2-3" tabindex="-1">HTTP/0.9/1.0/1.1/2/3 <a class="header-anchor" href="#http-0-9-1-0-1-1-2-3" aria-label="Permalink to &quot;HTTP/0.9/1.0/1.1/2/3&quot;">​</a></h1><h2 id="http-0-9-超文本传输协议" tabindex="-1">HTTP/0.9 超文本传输协议 <a class="header-anchor" href="#http-0-9-超文本传输协议" aria-label="Permalink to &quot;HTTP/0.9 超文本传输协议&quot;">​</a></h2><p><code>1991</code> 年提出，只是用来在网络之间传递 <code>html</code> 超文本内容，所以被称作 <strong>超文本传输协议</strong>。特点：</p><ul><li>只有 <code>GET</code> 请求，且只有 请求行 <code>GET /index.html</code> ，并没有请求头和请求体。</li><li>没有 响应头。</li><li>返回文件内容以 <code>ASCII</code> 字符流传输，因为都是 <code>html</code> 格式的文件</li></ul><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>只能使用 <strong>GET 简单请求 html</strong>，无法满足日益发展的 <code>web</code> 页面数据传输。如： <code>js</code> 、 <code>css</code> 、图片、音频、视频 等。</li></ul><h2 id="http-1-0" tabindex="-1">HTTP/1.0 <a class="header-anchor" href="#http-1-0" aria-label="Permalink to &quot;HTTP/1.0&quot;">​</a></h2><h3 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>浏览器中展示不单单是 <code>html</code> 文件，还包括了 <code>js</code>、<code>css</code>、图片、音频、视频 等不同类型的文件，因此支持多种 文件类型、编码 是 <code>HTTP/1.0</code> 的一个核心诉求。</p><h3 id="实现" tabindex="-1">实现 <a class="header-anchor" href="#实现" aria-label="Permalink to &quot;实现&quot;">​</a></h3><p>引入 <strong>请求头</strong> 和 <strong>响应头</strong> ，以 <code>key-value</code> 的形式来互相告知如何处理数据。</p><h3 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>增加 <strong>请求头</strong> 和 <strong>响应头</strong></li><li>支持多种 <strong>数据类型</strong>、<strong>编码</strong>，<code>content-type</code> 常见值： <code>text/html</code> 、 <code>application/json</code></li><li>新增 <strong>状态码</strong></li><li>利用 <strong>cache 机制缓存</strong>下载过的数据</li><li>增加<strong>用户代理字段</strong></li><li>多语言支持</li><li>支持文件压缩</li></ul><h3 id="缺点-1" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-1" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li>无持久连接。一个丰富的页面可能存在几十上百个请求，每次请求都要通过 <code>tcp</code> 的 三次握手、四次挥手，多个请求会导致开关 <code>tcp</code> 连接频繁耗时。因此要继续发展 <code>http/1.1</code></li></ul><h2 id="http-1-1" tabindex="-1">HTTP/1.1 <a class="header-anchor" href="#http-1-1" aria-label="Permalink to &quot;HTTP/1.1&quot;">​</a></h2><h3 id="背景-1" tabindex="-1">背景 <a class="header-anchor" href="#背景-1" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p><code>tcp</code> 频繁连接耗时，需要提供 <strong>持久连接</strong> 能力，即一个 <code>tcp</code> 连接上传输 多个 <code>http</code> 请求。</p><h3 id="特点-1" tabindex="-1">特点 <a class="header-anchor" href="#特点-1" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><strong>一个 tcp 连接可传输多个 http</strong>，减少服务器负担、降低 <code>http</code> 请求时长。</li><li>默认开启持久连接，<code>Connection: keep-alive</code>。</li><li>对于同一域名，默认允许同时建立 <strong>6 个 tcp 持久连接</strong>。</li><li>使用 <code>CDN</code> 的实现域名分片机制，可以实现更多连接。</li></ul><h3 id="缺点-2" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-2" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><strong>队头阻塞</strong>。持久连接虽然能减少 <code>tcp</code> 连接断开次数，但是它需要前面的请求返回后才能进行下一次请求。如果 <code>tcp</code> 通道中某个请求因为某些原因没有及时返回，就会阻塞后面的所有请求。</li><li><strong>tcp 慢启动</strong>，下载网速类比汽车 <code>0-100km/h</code> 加速过程。对于页面中的很小的关键资源 <code>js</code>、<code>css</code> 等耗时较长。</li><li><strong>多条 TCP 连接会导致带宽竞争</strong>。多个 <code>tcp</code> 连接的发送和接收速度在慢慢增加，而一旦带宽不足，<code>tcp</code> 连接又会减慢发送或接收的速度。导致 图片、音频等 会抢夺 关键资源 （如：<code>js</code>、<code>css</code>） 的 <code>tcp</code> 带宽，<code>tcp</code> 连接之间又不能协商让哪些关键资源有限下载，就可能会影响了那些关键资源的下载。</li></ul><h2 id="http-2" tabindex="-1">HTTP/2 <a class="header-anchor" href="#http-2" aria-label="Permalink to &quot;HTTP/2&quot;">​</a></h2><h3 id="背景-2" tabindex="-1">背景 <a class="header-anchor" href="#背景-2" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p>慢启动 和 <code>tcp</code> 连接之间互相竞争 带宽 是由于 <code>tcp</code> 本身的机制导致的，而队头阻塞是由于 <code>http/1.1</code> 的机制导致的。</p><p>为此 <code>http/2</code> 提出了 <strong>多路复用</strong> 功能。基本思路是：</p><ul><li>一个域名只使用一个 <code>tcp</code> 长连接 来传输数据，只需一次 慢启动，同时避免 带宽竞争。</li><li>资源并行请求，随时发送接收，解决 队头阻塞问题。</li></ul><h3 id="特点-2" tabindex="-1">特点 <a class="header-anchor" href="#特点-2" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li><strong>多路复用技术</strong>。基于 <strong>二进制分帧层</strong>。即在协议栈中增加二进制分帧层，标记、解析 资源 <code>id</code> 。</li><li><strong>可以设置请求优先级</strong>。基于 二进制分帧层，标记请求优先处理。</li><li><strong>服务器推送</strong>。当服务器处理一个 <code>html</code> 请求时，附带将页面上的 <code>js</code>、<code>css</code> 等重要资源一并发送回来。</li><li><strong>头部压缩</strong>。大部分资源请求都是只有 请求头，压缩请求头可提高传输效率。</li></ul><h3 id="缺点-3" tabindex="-1">缺点 <a class="header-anchor" href="#缺点-3" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ul><li><strong>tcp 的队头阻塞</strong>。底层 <code>tcp</code> 协议仍是 管道传输，且只有一个 <code>tcp</code> 连接，丢包时需要等待重发，丢包率达到 <code>2%</code> 时，<code>http/1.1</code> 的 <code>6</code> 个 <code>tcp</code> 连接 比 <code>http/2</code> 效率高。</li><li><strong>tcp、tls 连接耗时</strong>。<code>tcp</code> 协议始终需要 三次握手、四次挥手来建立连接。如果时 <code>https</code> 的话，还需要 进行 <code>TLS</code> 连接耗时。</li><li><strong>协议僵化</strong>。操作系统 和 网络中间设备（路由器、防火墙、交换机等）的 <code>tcp</code> 协议许久无优化。即使我们客户端升级了 <code>tcp</code> 协议，但是当新协议的 数据包经过这些中间设备时，可能不被识别而丢弃。</li></ul><h2 id="http-3" tabindex="-1">HTTP/3 <a class="header-anchor" href="#http-3" aria-label="Permalink to &quot;HTTP/3&quot;">​</a></h2><h3 id="背景-3" tabindex="-1">背景 <a class="header-anchor" href="#背景-3" aria-label="Permalink to &quot;背景&quot;">​</a></h3><p><code>tcp</code> 队头阻塞 、 连接耗时 和 协议僵化 无可避免，故 基于 <code>UDP</code> 协议实现类似于 <code>TCP</code> 的多路数据流、传输可靠性等功能。称为 <code>QUIC</code> 协议。</p><h3 id="特点-3" tabindex="-1">特点 <a class="header-anchor" href="#特点-3" aria-label="Permalink to &quot;特点&quot;">​</a></h3><ul><li>实现类似 <code>tcp</code> 的流量控制、传输可靠的功能。 <code>QUIC</code> 在 <code>UDP</code> 的基础上增加一层来保证数据可靠性传输。它提供了 <strong>数据包重传</strong>、<strong>拥塞控制</strong>及其他 <code>tcp</code> 中存在的特性。</li><li>集成 <code>TLS</code> 加密功能，减少建立连接时间。</li><li>实现 <code>http/2</code> 中的 <strong>多路复用</strong> 功能。和 <code>tcp</code> 不同， <code>QUIC</code> 实现了在同一物理连接上可以有多个独立的逻辑数据流，实现数据流的单独传输，解决 <code>tcp</code> 中队头阻塞问题。</li><li>实现 快速握手。基于 <code>udp</code> 协议，提升握手速度。</li></ul><h3 id="挑战" tabindex="-1">挑战 <a class="header-anchor" href="#挑战" aria-label="Permalink to &quot;挑战&quot;">​</a></h3><ul><li>服务器、浏览器未能提供比较完整的支持</li><li>系统内核对 <code>UDP</code> 的优化 远没有达到 <code>tcp</code> 的优化程度</li><li>中间设备僵化，中间设备对 <code>udp</code> 的优化程度远低于 <code>tcp</code>，<code>QUIC</code> 协议丢包率达到了约 <code>3%-7%</code></li></ul>',38),l=[a];function r(i,h,n,s,p,u){return e(),t("div",null,l)}const b=o(d,[["render",r]]);export{P as __pageData,b as default};
