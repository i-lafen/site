import{_ as e,o,c as d,Q as c}from"./chunks/framework.d544cf0e.js";const S=JSON.parse('{"title":"Vite","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/vite.md","filePath":"engineering/vite.md","lastUpdated":1692961506000}'),l={name:"engineering/vite.md"},t=c('<h1 id="vite" tabindex="-1">Vite <a class="header-anchor" href="#vite" aria-label="Permalink to &quot;Vite&quot;">​</a></h1><h2 id="vite-模块" tabindex="-1">Vite 模块 <a class="header-anchor" href="#vite-模块" aria-label="Permalink to &quot;Vite 模块&quot;">​</a></h2><p><code>Vite</code> 中会将 模块 分为 两种 ，一种是 <strong>源代码</strong>，即我们编写的业务代码，一种是 <strong>第三方依赖代码</strong>，即 <code>node_modules</code> 中的代码。 <code>Vite</code> 之所以快是因为分别对这两种代码进行了不同的处理，即</p><ul><li>源代码 <code>no-bundle</code></li><li>依赖包 预构建</li></ul><h3 id="源码-no-bundle" tabindex="-1">源码 no-bundle <a class="header-anchor" href="#源码-no-bundle" aria-label="Permalink to &quot;源码 no-bundle&quot;">​</a></h3><p>利用 浏览器原生 <code>ES</code> 模块的支持，实现开发阶段 <code>Dev Server</code> ， 进行模块按需加载，不用整体打包再加载。</p><p>其中一个 <code>import</code> 语句即代表一个 <code>http</code> 请求，然后由 <code>vite</code> 的 <code>Dev Servr</code> 来接收这些请求、进行文件转译以及返回浏览器可运行代码。</p><p>通常我们的源代码一般都不直接是 <code>js</code> 代码，还可能是 <code>vue</code> 、 <code>jsx</code> 、 <code>tsx</code> 等，所以需要 <code>Dev Server</code> 在浏览器和源代码中间做一层转译。</p><h3 id="依赖-预构建" tabindex="-1">依赖 预构建 <a class="header-anchor" href="#依赖-预构建" aria-label="Permalink to &quot;依赖 预构建&quot;">​</a></h3><p>其中 <code>no-bundle</code> 只是对 源代码 而言，对于 <code>node_modules</code> ， <code>Vite</code> 还是需要 <code>bundle</code> （打包） 的，并且使用速度极快的 <code>esbuild</code> 来进行， <code>esbuild</code> 使用 <code>GO</code> 编写，相比于 <code>JavaScript</code> 编写的打包器预构建依赖快 <code>10-100</code> 倍。</p><h3 id="为什么要预构建" tabindex="-1">为什么要预构建 <a class="header-anchor" href="#为什么要预构建" aria-label="Permalink to &quot;为什么要预构建&quot;">​</a></h3><ul><li>转换依赖包支持 <code>ESM</code> 规范</li><li>解决 <code>import</code> 请求瀑布流问题</li><li><code>HMR</code> （热更新）时 利用 <code>http</code> 缓存 来加速页面重载</li></ul><h4 id="转换依赖包为-esm-规范" tabindex="-1">转换依赖包为 ESM 规范 <a class="header-anchor" href="#转换依赖包为-esm-规范" aria-label="Permalink to &quot;转换依赖包为 ESM 规范&quot;">​</a></h4><p><code>Vite</code> 是基于浏览器原生 <code>ES</code> 模块规范实现的 <code>Dev Server</code> ， 无论是业务代码或者是依赖包，理应符合 <code>ESM</code> 规范才能正常运行。</p><p>但第三方依赖包的打包规范（ <code>Commonjs</code> 、 <code>UMD</code> 、 <code>ESM</code> ）我们无法控制，如 <code>react</code> 包就没有 <code>ESM</code> 版本的产物，只有 <code>Commonjs</code> 规范的包，浏览器无法直接使用，故 <code>Vite</code> 需要将其转换成 <code>ESM</code> 格式的产物，使其在浏览器通过 <code>&lt;script type=&quot;module&quot;&gt;&lt;script&gt;</code> 的方式正常加载。</p><p>预构建的依赖包也会存放在 <code>node_modules/.vite</code> 目录下，并且 <code>Vite</code> 会将业务代码中的引包路径重写到该目录下。</p><h4 id="请求瀑布流" tabindex="-1">请求瀑布流 <a class="header-anchor" href="#请求瀑布流" aria-label="Permalink to &quot;请求瀑布流&quot;">​</a></h4><p>前面我们说开发时一个 <code>import</code> 即代表一个请求，这就可能会出现 <code>import</code> 文件过多导致浏览器发出特别多的请求，导致页面加载的前几秒都处于卡顿状态，即 请求瀑布流问题。</p><p>例如在使用 <code>lodash-es</code> 中的 <code>debounce</code> 方法，这个方法会依赖很多工具函数，在使用的时候，每个 <code>import</code> 都会触发一次新的文件请求，因此在这种 依赖层级深 、 涉及模块数量多 的情况下，成百上千个网络请求量会导致页面一直卡顿（如 <code>Chrome</code> 同一个域名下只能同时支持 <code>6</code> 个 <code>http</code> 并发请求的限制）。</p><p>但在 <code>Vite</code> 进行 依赖预构建 之后， <code>lodash-es</code> 的代码合并成一个文件，大大减少了依赖包带来的请求过载问题。</p><h4 id="hmr-热更新-时的-http-缓存优化" tabindex="-1">HMR (热更新)时的 http 缓存优化 <a class="header-anchor" href="#hmr-热更新-时的-http-缓存优化" aria-label="Permalink to &quot;HMR (热更新)时的 http 缓存优化&quot;">​</a></h4><p>在 <code>Vite</code> 中 <code>HMR</code> （热更新）是在 原生 <code>ESM</code> 上执行的， <code>Vite</code> 会充分利用了浏览器 <code>http</code> 强缓存 与 协商缓存 来优化模块请求加载。</p><ul><li>源码模块的请求会根据 <code>304 Not Modified</code> 进行 协商缓存</li><li>依赖模块请求在会通过 <code>Cache-Control: max-age=31536000,immutable</code> 进行强缓存</li></ul><h2 id="vite-双引擎-esbuild-和-rollup" tabindex="-1">Vite 双引擎 esbuild 和 rollup <a class="header-anchor" href="#vite-双引擎-esbuild-和-rollup" aria-label="Permalink to &quot;Vite 双引擎 esbuild 和 rollup&quot;">​</a></h2><p>通常我们说 <code>Vite</code> 打包构建时 开发阶段使用 <code>esbuild</code> 、 生产环境使用 <code>rollup</code> ，但其中实际更复杂。</p><h3 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-label="Permalink to &quot;esbuild&quot;">​</a></h3><p><code>esbuild</code> 在很多关键构建阶段发挥了重要作用，在很多关键的构建阶段（ 如 依赖预编译 、 TS 语法转译 、 代码压缩 ）让 <code>Vite</code> 获得了相当优异的性能。</p><h4 id="依赖预构建-作为-bundle-工具" tabindex="-1">依赖预构建 - 作为 Bundle 工具 <a class="header-anchor" href="#依赖预构建-作为-bundle-工具" aria-label="Permalink to &quot;依赖预构建 - 作为 Bundle 工具&quot;">​</a></h4><p>依赖预构建时主要 对依赖包进行 <code>esm</code> 格式转换，合并依赖包的分散文件以减少请求。</p><p>并且采用 <code>GO</code> 编写的 <code>esbuild</code> 在作为打包工具时，其性能远超其他 <code>js</code> 编写的打包工具 <code>10-100</code> 倍。</p><p>但 <code>esbuild</code> 也有其缺点：</p><ul><li>不支持降级到 <code>es5</code> 代码，所以低端浏览器无法运行</li><li>不支持 <code>const enum</code> 等语法</li><li>不提供操作打包产物接口，不如 <code>rollup</code> 灵活</li><li>不支持自定义 <code>Code Splitting</code> 策略，不如 <code>rollup</code> 和 <code>webpack</code> 等</li></ul><h4 id="单文件编译-作为-ts-和-jsx-编译工具" tabindex="-1">单文件编译 - 作为 TS 和 JSX 编译工具 <a class="header-anchor" href="#单文件编译-作为-ts-和-jsx-编译工具" aria-label="Permalink to &quot;单文件编译 - 作为 TS 和 JSX 编译工具&quot;">​</a></h4><p><code>esbuild</code> 在文件编译时也作为 <code>Transformer</code> 来使用（ <strong>生产环境</strong> 也应用了），替换了原先 <code>Babel</code> 和 <code>TSC</code> 的功能，相比之下提升巨大（ <code>SWC</code> 的编译性能与 <code>esbuild</code> 相近 ）。</p><p>但 <code>Esbuild Transformer</code> 也有其局限性，因为 <code>esbuild</code> 并没有实现 <code>TS</code> 的类型系统，在编译 <code>TS/TSX</code> 文件时只是抹掉了类型相关的代码，暂时没有能力实现类型检查。</p><p>所以 <code>vite</code> 官方建议项目中使用 <code>TS</code> 的编辑器插件，在开发阶段时检查类型问题。</p><h4 id="代码压缩-作为压缩工具" tabindex="-1">代码压缩 - 作为压缩工具 <a class="header-anchor" href="#代码压缩-作为压缩工具" aria-label="Permalink to &quot;代码压缩 - 作为压缩工具&quot;">​</a></h4><blockquote><p><code>Vite</code> 从 <code>2.6</code> 版本开始，就官宣默认使用 <code>Esbuild</code> 来进行 <strong>生产环境</strong> 的 代码压缩，包括 <code>JS</code> 代码和 <code>CSS</code> 代码。</p></blockquote><p><code>esbuild</code> 压缩器通过插件形式融入到了 <code>rollup</code> 的打包流程中，压缩效率大大提升。</p><p>传统方式使用的是 <code>Terser</code> 这种 <code>JS</code> 开发的压缩器来实现，在 <code>webpack</code> 或 <code>rollup</code> 中作为 <code>plugin</code> 来完成代码打包压缩工作，但是速度却很慢，原因有 <code>2</code> 点：</p><ul><li>压缩时涉及大量 <code>AST</code> 操作，并且在传统的构建流程中， <code>AST</code> 在各个工具之间无法共享，比如 <code>Terser</code> 就无法与 <code>Babel</code> 共享一个 <code>AST</code> ， 造成很多重复解析</li><li><code>JS</code> 本身属于 解释性 + <code>JIT</code> 语言，对于压缩这种 <code>CPU</code> 密集型工作，其性能远比不上 <code>Golang</code> 语言</li></ul><p>因此 <code>esbuild</code> 这种从头到尾 共享 <code>AST</code> 的 <code>Minifier</code> 在性能上能够做到极速。</p><h3 id="rollup" tabindex="-1">rollup <a class="header-anchor" href="#rollup" aria-label="Permalink to &quot;rollup&quot;">​</a></h3><p><code>rollup</code> 作为生产环境打包的核心工具，也直接决定了 <code>Vite</code> 插件机制的设计。</p><ul><li><code>css</code> 代码分割。如果某个异步模块中引入了一些 <code>CSS</code> 代码， <code>Vite</code> 就会自动将这些 <code>CSS</code> 抽取出来生成单独的文件，提高线上产物的缓存复用率。</li><li>自动预加载。 <code>Vite</code> 会自动为入口 <code>chunk</code> 的依赖自动生成预加载标签 <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> 。</li><li>异步 <code>Chunk</code> 加载优化。如有依赖关系会发起如下 <code>entry-&gt;A-&gt;C</code> 和 <code>entry-&gt;B-&gt;C</code> ，一般情况下， <code>rollup</code> 打包之后 ，会先请求 <code>A</code> ， 然后浏览器加载 <code>A</code> 的过程中才决定请求和加载 <code>C</code> ，但 <code>Vite</code> 进行优化之后，请求 <code>A</code> 的同时会自欧东预加载 <code>C</code> ，通过 优化 <code>rollup</code> 的产物依赖加载方式节省了不必要的网络开销。</li><li>兼容插件机制。开发和生成环境都依赖于 <code>rollup</code> 的插件机制和生态。</li></ul><h2 id="为什么-esbuild-性能极高" tabindex="-1">为什么 esbuild 性能极高 <a class="header-anchor" href="#为什么-esbuild-性能极高" aria-label="Permalink to &quot;为什么 esbuild 性能极高&quot;">​</a></h2><ul><li><strong>使用 Golang 开发</strong> 。直接编译成原生机器码，而不用像 <code>js</code> 一样先解析成字节码，然后转换成机器码，大大节省了程序运行时间</li><li><strong>多核并行</strong> 。内部打包算法充分利用多核 <code>CPU</code> 优势，所有步骤尽可能并行，这也是得益于 <code>Go</code> 当中多线程共享内存的优势</li><li><strong>从零造轮子</strong> 。几乎没有使用任何第三方库，所有逻辑自己编写，大到 <code>AST</code> 解析，小到字符串操作，保证极致的代码性能</li><li><strong>高效的内存利用</strong> 。 <code>esbuild</code> 从头到尾尽可能的复用一份 <code>AST</code> 节点数据，而不用像 <code>JS</code> 打包工具中频繁的解析和传递 <code>AST</code> 数据 （ 如 <code>string-&gt;TS-&gt;JS-&gt;string</code> ） ，造成时间和内存的大量浪费</li></ul><h2 id="sources" tabindex="-1">Sources <a class="header-anchor" href="#sources" aria-label="Permalink to &quot;Sources&quot;">​</a></h2><p><a href="https://juejin.cn/book/7050063811973218341" target="_blank" rel="noreferrer">深入浅出Vite</a></p>',49),i=[t];function a(r,s,n,u,h,p){return o(),d("div",null,i)}const m=e(l,[["render",a]]);export{S as __pageData,m as default};
