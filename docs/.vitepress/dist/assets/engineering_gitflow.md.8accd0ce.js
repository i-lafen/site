import{_ as a,o as l,c as e,Q as o}from"./chunks/framework.d544cf0e.js";const g=JSON.parse('{"title":"Gitflow","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/gitflow.md","filePath":"engineering/gitflow.md","lastUpdated":1692961506000}'),s={name:"engineering/gitflow.md"},t=o(`<h1 id="gitflow" tabindex="-1">Gitflow <a class="header-anchor" href="#gitflow" aria-label="Permalink to &quot;Gitflow&quot;">​</a></h1><h2 id="介绍" tabindex="-1">介绍 <a class="header-anchor" href="#介绍" aria-label="Permalink to &quot;介绍&quot;">​</a></h2><p>gitflow 工作流测试</p><h3 id="建立新的功能" tabindex="-1">建立新的功能 <a class="header-anchor" href="#建立新的功能" aria-label="Permalink to &quot;建立新的功能&quot;">​</a></h3><ol><li>Git 工作流 - 初始化 gitflow</li><li>Git 工作流 - <strong>建立新的功能</strong> （将在 develop 分支上新建 feature 分支）： <ol><li>创建一个新的功能分支</li><li>在新的功能分支上开发功能</li><li>暂存 - 提交</li></ol></li><li>Git 工作流 - <strong>完成功能</strong>（将开发完毕的 feature 分支合并到 develop 分支）</li></ol><h3 id="建立新的发布版本" tabindex="-1">建立新的发布版本 <a class="header-anchor" href="#建立新的发布版本" aria-label="Permalink to &quot;建立新的发布版本&quot;">​</a></h3><ol><li>Git 工作流 - 建立新的发布版本（在 develop 分支上新建 release 分支）</li><li>Git 工作流 - 完成发布版本</li></ol><h3 id="建立新的修复补丁" tabindex="-1">建立新的修复补丁 <a class="header-anchor" href="#建立新的修复补丁" aria-label="Permalink to &quot;建立新的修复补丁&quot;">​</a></h3><ol><li>Git 工作流 - 建立新的修复补丁</li><li>完成修复补丁</li></ol><h3 id="gitflow-sourcetree" tabindex="-1">gitflow + sourceTree <a class="header-anchor" href="#gitflow-sourcetree" aria-label="Permalink to &quot;gitflow + sourceTree&quot;">​</a></h3><h4 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h4><ol><li>规范代码分支管理</li><li>提高代码分支管理效率</li></ol><h4 id="gitflow-1" tabindex="-1">gitflow <a class="header-anchor" href="#gitflow-1" aria-label="Permalink to &quot;gitflow&quot;">​</a></h4><p>gitflow 是一套使用 Git 进行源代码管理时的一套行为规范，sourceTree 是简化部分 gitflow 操作的工具。</p><h4 id="gitflow-常用分支" tabindex="-1">gitflow 常用分支 <a class="header-anchor" href="#gitflow-常用分支" aria-label="Permalink to &quot;gitflow 常用分支&quot;">​</a></h4><h5 id="主分支" tabindex="-1">主分支 <a class="header-anchor" href="#主分支" aria-label="Permalink to &quot;主分支&quot;">​</a></h5><p>核心分支，主要分为 master 和 develop 分支，不直接在主分支进行开发。</p><ul><li><p>master</p><p>master 分支存放的是生产环境的代码</p></li><li><p>develop</p><p>develop 分支保存的是当前最新的开发进度，通常可用于发布</p></li></ul><h5 id="辅助分支" tabindex="-1">辅助分支 <a class="header-anchor" href="#辅助分支" aria-label="Permalink to &quot;辅助分支&quot;">​</a></h5><p>用于实际开发与解决各种软件开发活动的分支。可用于新功能开发、辅助版本发布、生产代码缺陷的紧急修复等工作。与主分支不同的是，辅助分支通常只用于解决某些问题的有限时间内存在。</p><ul><li>feature 分支 <ul><li>可以从 develop 分支发起 feature 分支</li><li>feature 分支必须合并回 develop 分支</li><li>分支命名应避免 master、develop 等关键词，惯用 feature/xxx 命名</li></ul></li><li>release 分支 <ul><li>可以从 develop 分支发起</li><li>必须合并回 develop 分支和 master 分支</li><li>分支命名惯用 release/1.0.0</li></ul></li><li>hotfix 分支 <ul><li>从 master 分支发起</li><li>必须合并回 master 分支和 develop 分支</li><li>分支命名惯用 hotfix/xxx</li></ul></li></ul><h4 id="sourcetree" tabindex="-1">sourceTree <a class="header-anchor" href="#sourcetree" aria-label="Permalink to &quot;sourceTree&quot;">​</a></h4><p>sourceTree 是非常方便约束 gitflow 流程的工具，建议使用。</p><h3 id="git-commit-message" tabindex="-1">Git commit message <a class="header-anchor" href="#git-commit-message" aria-label="Permalink to &quot;Git commit message&quot;">​</a></h3><p>git 提交信息格式采用目前主流的 Angular 规范。</p><p>commit message 格式一般包括三部分</p><ul><li>Header</li><li>Body</li><li>Footer</li></ul><h4 id="header" tabindex="-1">Header <a class="header-anchor" href="#header" aria-label="Permalink to &quot;Header&quot;">​</a></h4><blockquote><p>type(scope): subject</p></blockquote><ul><li>type：用于说明 commit 的类别，规定为以下几种 <ul><li>feat： 新增功能</li><li>fix：修复 bug</li><li>docs：修改文档</li><li>refactor：代码重构，未新增任何功能和修复任何 bug</li><li>build：改变构建流程，新增依赖库、工具（例如 webpack 修改）</li><li>style：仅仅修改了空格、缩进等，不改变代码逻辑</li><li>perf：改善性能和体现的修改</li><li>chore：非 src 和 test 的修改</li><li>ci：自动化流程配置修改</li><li>revert：回滚到上一个版本</li></ul></li><li>scope：【可选】用于说明 commit 的影响范围</li><li>subject：commit 的简要说明，尽量简短</li></ul><h4 id="body" tabindex="-1">Body <a class="header-anchor" href="#body" aria-label="Permalink to &quot;Body&quot;">​</a></h4><p>对本次 commit 的详细描述，可分多行</p><h4 id="footer" tabindex="-1">Footer <a class="header-anchor" href="#footer" aria-label="Permalink to &quot;Footer&quot;">​</a></h4><ul><li>不兼容变动：需要描述相关信息</li><li>关闭指定 Issue：输入 Issue 信息</li><li>非必须</li></ul><h4 id="commit-message-工具" tabindex="-1">commit message 工具 <a class="header-anchor" href="#commit-message-工具" aria-label="Permalink to &quot;commit message 工具&quot;">​</a></h4><p><a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noreferrer">Commitizen</a> 是一个主流的 Commit message 生成工具，支持 Angular 的 commit message 格式，被众多主流框架采用</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-g</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">commitizen</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-g</span><span style="color:#24292E;"> </span><span style="color:#032F62;">commitizen</span></span></code></pre></div><p>安装完成后，需要在项目目录下，输入以下命令来初始化您的项目以使用 cz-conventional-changelog 适配器</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">commitizen</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">init</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">cz-conventional-changelog</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-exact</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">commitizen</span><span style="color:#24292E;"> </span><span style="color:#032F62;">init</span><span style="color:#24292E;"> </span><span style="color:#032F62;">cz-conventional-changelog</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-exact</span></span></code></pre></div><blockquote><p>上述命令会干 3 件事情：</p><ul><li>安装 cz-conventional-changelog</li><li>保存其依赖到 package.json 中</li><li>添加 config.commitizen key 到 package.json 中，如下：</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;config&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;commitizen&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">&quot;path&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;config&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;commitizen&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">&quot;path&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./node_modules/cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div></blockquote><h3 id="灵活使用" tabindex="-1">灵活使用 <a class="header-anchor" href="#灵活使用" aria-label="Permalink to &quot;灵活使用&quot;">​</a></h3><p>版本管理在团队开发中不可或缺，但也并非 gitflow 管理不可，应该按实际情况进行调整适配，比如：</p><ul><li>并非 source tree 不可，也可以使用 git 命令行或 vscode 插件</li><li>master 为受保护分支不可删除、推送更新，合并到 master 需提交 merge request</li><li>有时的测试环境资源不足，需多个功能分支合并测试的，可协定一个测试分支，如 test/qa，将功能分支合并到此分支进行测试</li></ul>`,43),i=[t];function n(r,p,c,h,d,u){return l(),e("div",null,i)}const f=a(s,[["render",n]]);export{g as __pageData,f as default};
