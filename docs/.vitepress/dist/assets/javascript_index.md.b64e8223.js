import{_ as i,o as a,c as l,Q as e}from"./chunks/framework.d544cf0e.js";const m=JSON.parse('{"title":"JavaScript","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/index.md","filePath":"javascript/index.md","lastUpdated":1692961506000}'),o={name:"javascript/index.md"},t=e('<h1 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h1><h2 id="js-基础" tabindex="-1">JS 基础 <a class="header-anchor" href="#js-基础" aria-label="Permalink to &quot;JS 基础&quot;">​</a></h2><ul><li>原型</li><li>原型链</li><li>闭包</li><li><code>this</code></li><li>箭头函数</li></ul><h2 id="js-深入理解" tabindex="-1">JS 深入理解 <a class="header-anchor" href="#js-深入理解" aria-label="Permalink to &quot;JS 深入理解&quot;">​</a></h2><ul><li>变量提升</li><li>调用栈</li><li>执行上下文、变量环境</li><li>作用域、词法环境</li><li>作用域链 和 闭包</li><li><code>this</code></li></ul><h2 id="js-优化" tabindex="-1">Js 优化 <a class="header-anchor" href="#js-优化" aria-label="Permalink to &quot;Js 优化&quot;">​</a></h2><ul><li>节流 、 防抖</li><li>深拷贝</li><li>链式调用</li><li>函数柯里化</li><li>尾调用、尾递归 优化</li><li>稀疏数组</li></ul><h2 id="js-模拟" tabindex="-1">JS 模拟 <a class="header-anchor" href="#js-模拟" aria-label="Permalink to &quot;JS 模拟&quot;">​</a></h2><ul><li><code>new</code></li><li><code>instanceof</code></li><li><code>call</code> 、 <code>apply</code> 、 <code>bind</code></li></ul><h2 id="js-代码" tabindex="-1">JS 代码 <a class="header-anchor" href="#js-代码" aria-label="Permalink to &quot;JS 代码&quot;">​</a></h2><ul><li><code>js</code> 链式调用</li><li>实现 <code>compose</code> 函数，类似 <code>koa</code> 中间件洋葱模型</li><li>虚拟 <code>dom</code> 转 真实 <code>dom</code></li><li>版本号排序</li><li>常见排序算法</li><li>二叉树遍历</li><li>滑动窗口最大值</li><li>最长递增子序列</li></ul>',11),c=[t];function d(r,s,n,h,u,_){return a(),l("div",null,c)}const j=i(o,[["render",d]]);export{m as __pageData,j as default};
