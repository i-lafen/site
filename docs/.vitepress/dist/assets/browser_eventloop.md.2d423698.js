import{_ as s,o as n,c as e,Q as o}from"./chunks/framework.281e52d7.js";const a="/site/assets/task.27d3d36d.png",l="/site/assets/loop.4bbbd74a.png",F=JSON.parse('{"title":"Event Loop","description":"","frontmatter":{},"headers":[],"relativePath":"browser/eventloop.md","filePath":"browser/eventloop.md"}'),t={name:"browser/eventloop.md"},p=o('<h1 id="event-loop" tabindex="-1">Event Loop <a class="header-anchor" href="#event-loop" aria-label="Permalink to &quot;Event Loop&quot;">​</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-label="Permalink to &quot;概念&quot;">​</a></h2><p><code>JavaScript</code>是一门<strong>单线程</strong>语言，同一时间内只能处理一件事情。</p><h2 id="javascript-事件循环" tabindex="-1">JavaScript 事件循环 <a class="header-anchor" href="#javascript-事件循环" aria-label="Permalink to &quot;JavaScript 事件循环&quot;">​</a></h2><p>既然<code>js</code>是单线程，处理任务是顺序执行的，那如果要处理的任务多了，就需要排队了，万一某一个任务一直没有处理完，那后面的任务就会一直堵塞，故任务需要区分为<strong>同步任务</strong>和<strong>异步任务</strong></p><p><img src="'+a+`" alt="eventtask.png"></p><p>图中表示的意思是：</p><ul><li><code>js</code>在执行任务的时候，将区分<strong>同步任务</strong>和<strong>异步任务</strong>，同步任务进入主线程执行，异步任务进入<code>Event Table</code>，并<strong>注册</strong>回调函数</li><li>当指定的事情完成时，<code>Event Table</code>会将这个回调函数移入<code>Event Queue</code></li><li>主线程内的任务执行完毕为<strong>空</strong>时，会去<code>Event Queue</code>读取对应的回调函数进入主线程执行</li><li>然后不断<strong>重复</strong>上述过程，也就是常说的<code>Event Loop</code>（<strong>事件循环</strong>）</li></ul><p><strong>注</strong>：<code>js</code>引擎存在<code>monitoring process</code>进程，会持续不断检查主线程执行栈是否为空，一旦为空，就会去<code>Event Queue</code>那里检查是否有等待被调用的函数</p><p><strong>简单示例</strong></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> data </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> []</span></span>
<span class="line"><span style="color:#E1E4E8;">$.</span><span style="color:#B392F0;">ajax</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	url: </span><span style="color:#9ECBFF;">&#39;www.js.com&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    data: data,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">success</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    	console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;请求成功&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">	}</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;结束&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> data </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> []</span></span>
<span class="line"><span style="color:#24292E;">$.</span><span style="color:#6F42C1;">ajax</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	url: </span><span style="color:#032F62;">&#39;www.js.com&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    data: data,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">success</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    	console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;请求成功&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">	}</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;结束&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>以上是一段简易的<code>ajax</code>请求代码，看看<code>js</code>是如何执行的</p><ul><li><code>ajax</code>进入<code>Event Table</code>，并<strong>注册</strong>回调函数<code>success</code></li><li>执行<code>console.log</code>(&#39;结束&#39;)</li><li><code>ajax</code>事件完成，回调函数<code>success</code>进入<code>Event Queue</code></li><li>主线程从<code>Event Queue</code>中读取回调函数<code>success</code>并执行</li></ul><p>原来<code>ajax</code>请求干了这么多事情0.0...</p><h2 id="settimeout" tabindex="-1">setTimeout <a class="header-anchor" href="#settimeout" aria-label="Permalink to &quot;setTimeout&quot;">​</a></h2><p>常用于模拟耗时操作的<code>setTimeout</code>，有时也并不是很精准，写的延时<code>1000ms</code>执行，但是有时候却可能有些差别，先看以下实例</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;延时1秒后执行&#39;</span><span style="color:#E1E4E8;">, end </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;我先执行&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;延时1秒后执行&#39;</span><span style="color:#24292E;">, end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;我先执行&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><p>我们都知道，以上代码打印顺序如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 我先执行</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;延时1秒后执行&#39; 1000</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 我先执行</span></span>
<span class="line"><span style="color:#6A737D;">// &#39;延时1秒后执行&#39; 1000</span></span></code></pre></div><p>看起来貌似没什么毛病，但是运行多几次就会发现，<code>1000</code>并不一直是<code>1000</code>，还可能会是<code>1001、1002</code>...</p><p>假如主线程中存在非常<strong>耗时</strong>的操作，例如以下伪代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">task</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 假如这是一个非常耗时的函数</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">task</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 假如这是一个非常耗时的函数</span></span></code></pre></div><p>此时，<code>setTimeout</code>的延时<code>1000ms</code>执行，就差别很多了，先看看是怎么执行的</p><ul><li><code>js</code>执行过程中遇到<code>setTimeout</code>，首先将<code>task()</code>放入<code>Event Table</code>并注册，计时开始</li><li>往下执行遇到<code>sleep</code>函数，但是<code>sleep</code>函数执行得很慢，计时还在继续</li><li>1秒到了，计时事件<code>setTimeout</code>完成，<code>task()</code>进入<code>Event Queue</code>，但是<code>sleep</code>函数还在占用主线程，还没执行完，只能继续等待</li><li><code>sleep</code>函数终于执行完毕，<code>task()</code>终于从<code>Event Queue</code>进入主线程执行</li></ul><p>现在我们知道此时的<code>setTimeout</code>的含义是：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">在1秒之后，</span><span style="color:#B392F0;">需要把task</span><span style="color:#E1E4E8;">()加入到Event Queue中,</span></span>
<span class="line"><span style="color:#E1E4E8;">等待主线程空闲时进入主线程执行,</span></span>
<span class="line"><span style="color:#E1E4E8;">但是当主线程正在处理耗时操作时，那就只能等着,</span></span>
<span class="line"><span style="color:#E1E4E8;">从而导致了延迟的时间远超过了1秒</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">在1秒之后，</span><span style="color:#6F42C1;">需要把task</span><span style="color:#24292E;">()加入到Event Queue中,</span></span>
<span class="line"><span style="color:#24292E;">等待主线程空闲时进入主线程执行,</span></span>
<span class="line"><span style="color:#24292E;">但是当主线程正在处理耗时操作时，那就只能等着,</span></span>
<span class="line"><span style="color:#24292E;">从而导致了延迟的时间远超过了1秒</span></span></code></pre></div><p>那我们经常遇到的<code>setTimeout(fn, 0)</code>，是不是就会立即执行呢？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">答案是不会的，fn依然会进入Event Queue中等待主线程空闲之后才能进入主线程执行</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">答案是不会的，fn依然会进入Event Queue中等待主线程空闲之后才能进入主线程执行</span></span></code></pre></div><p>如果主线程为空时，会达到0秒后执行吗？</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">实际上也不会，根据HTML的标准，最低是4ms，可运行尝试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> start </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> end </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Date.</span><span style="color:#B392F0;">now</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;延时0秒？&#39;</span><span style="color:#E1E4E8;">, end </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> start)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">实际上也不会，根据HTML的标准，最低是4ms，可运行尝试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> start </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> end </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Date.</span><span style="color:#6F42C1;">now</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;延时0秒？&#39;</span><span style="color:#24292E;">, end </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> start)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><h2 id="setinterval" tabindex="-1">setInterval <a class="header-anchor" href="#setinterval" aria-label="Permalink to &quot;setInterval&quot;">​</a></h2><p>与<code>setTimeout</code>相似，<code>setInterval</code>是<strong>每隔指定时间</strong>会将回调函数放入<code>EventQueue</code>中，如果主线程在忙，也同样需要等待。</p><p>值得注意的是，放入<code>Event Queue</code>的时间间隔是指定的，但是如果主线程耗时操作大于或等于这个时间间隔，那就完全看不出有时间间隔执行了，伪代码示例如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setInterval</span><span style="color:#E1E4E8;">(fn, </span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 每间隔1000ms将回调fn置入Event Queue</span></span>
<span class="line"><span style="color:#B392F0;">sleep</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1000</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 假如这个函数将耗时1000ms，以上的间隔1000ms执行则看不出是有间隔的执行了</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setInterval</span><span style="color:#24292E;">(fn, </span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 每间隔1000ms将回调fn置入Event Queue</span></span>
<span class="line"><span style="color:#6F42C1;">sleep</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1000</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 假如这个函数将耗时1000ms，以上的间隔1000ms执行则看不出是有间隔的执行了</span></span></code></pre></div><h2 id="promise-与-process-nexttick-callback" tabindex="-1">Promise 与 process.nextTick(callback) <a class="header-anchor" href="#promise-与-process-nexttick-callback" aria-label="Permalink to &quot;Promise 与 process.nextTick(callback)&quot;">​</a></h2><p><code>Promise</code>的定义和功能不再赘述，不了解的读者可以学习一下阮一峰老师的<a href="https://link.juejin.im/?target=http%3A%2F%2Fes6.ruanyifeng.com%2F%23docs%2Fpromise" target="_blank" rel="noreferrer">Promise</a></p><p>而<code>process.nextTick(callback)</code>类似node.js版的&quot;<code>setTimeout</code>&quot;，在事件循环的下一次循环中调用 <code>callback</code> 回调函数。</p><p>除了<strong>同步任务</strong>和<strong>异步任务</strong>，我们需要对任务有更精细的定义：</p><ul><li><code>macro-task</code>(<strong>宏任务</strong>)：包含整体代码<code>script</code>、<code>setTimeout</code>、<code>setInterval</code></li><li><code>micro-task</code>(<strong>微任务</strong>)：<code>Promise</code>、<code>process.nextTick</code></li></ul><p><strong>宏任务</strong>和<strong>微任务</strong>会进入<strong>不同</strong>的<code>Event Queue</code>，<code>js</code>在执行过程中，进入<strong>整体代码（宏任务）</strong>，开始第一次循环，接着执行<strong>所有微任务</strong>，然后再次从宏任务开始执行任务队列，完毕之后再次执行所有微任务，依次循环</p><p>先看以下代码：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;setTimeout&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;promise&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;then&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;console&#39;</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;setTimeout&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;promise&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;then&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;console&#39;</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li>整体代码作为<strong>宏任务</strong>，进入主线程</li><li>先遇到<code>setTimeout</code>，将其回调函数注册后分发到<strong>宏任务</strong><code>Event Queue</code></li><li>然后遇到<code>new Promise</code>，立即执行其中的函数打印出<code>promise</code>，<code>then</code>函数则分发到<strong>微任务</strong><code>Event Queue</code></li><li>往下遇到<code>console.log()</code>，直接打印出<code>console</code></li><li>此时整体代码作为<strong>第一个宏任务执行结束</strong>，首先看看有哪些微任务？此时<strong>微任务</strong><code>Event Queue</code>中发现了<code>then</code>，取出执行，打印出<code>then</code></li><li>第一轮事件循环结束，开始第二轮循环，从宏任务<code>Event Queue</code>开始，此时发现宏任务<code>Event Queue</code>中有<code>setTimeout</code>对应的回调函数，立即执行</li><li>结束</li></ul><p><strong>事件循环、宏任务、微任务</strong>关系图如下：</p><p><img src="`+l+`" alt="eventloop.png"></p><h2 id="经典示例" tabindex="-1">经典示例 <a class="header-anchor" href="#经典示例" aria-label="Permalink to &quot;经典示例&quot;">​</a></h2><p>检验是否掌握了<code>js</code>执行机制，看以下代码</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;1&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;2&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  process.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;4&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;5&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#E1E4E8;">process.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;6&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;7&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;8&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">setTimeout</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;9&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  process.</span><span style="color:#B392F0;">nextTick</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;10&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Promise</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">resolve</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;11&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  }).</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;12&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  })</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;1&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;2&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  process.</span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;4&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;5&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#24292E;">process.</span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;6&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;7&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;8&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">setTimeout</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;9&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  process.</span><span style="color:#6F42C1;">nextTick</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;10&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Promise</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">resolve</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;11&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">  }).</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;12&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  })</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><h3 id="详细分析" tabindex="-1"><strong>详细分析</strong> <a class="header-anchor" href="#详细分析" aria-label="Permalink to &quot;**详细分析**&quot;">​</a></h3><p><strong>第一轮</strong></p><ul><li><p>整体代码作为<strong>宏任务</strong>进入主线程执行</p></li><li><p>首先遇到<code>console.log(&#39;1&#39;)</code>，直接打印，<em><strong>此时控制台输出</strong></em> <em>1</em></p></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">-</td><td style="text-align:center;">-</td><td style="text-align:center;"><em>1</em></td></tr></tbody></table><ul><li>往下遇到<code>setTimeout</code>，没有设置延迟时间，则默认为<code>0</code>，将其<strong>回调函数</strong>注册到<code>Event Table</code>后立即分发至<strong>宏任务</strong><code>Event Queue</code>，至于回调函数中有什么，先不管，因为要等待主线程空闲了才能进入主线程去执行，此时的任务队列里面是这样的</li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">1. <code>setTimeout</code></td><td style="text-align:center;">-</td><td style="text-align:center;"><em>1</em></td></tr></tbody></table><ul><li>再往下遇到<code>process.nextTick</code>，将其注册后分发至<strong>微任务</strong><code>Event Queue</code>，此时</li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">1. <code>setTimeout</code></td><td style="text-align:center;">1. <code>process.nextTick</code></td><td style="text-align:center;"><em>1</em></td></tr></tbody></table><ul><li>然后往下遇到<code>new Promise</code>，直接执行里面代码打印，<em><strong>此时控制台输出</strong></em> <em>7</em>，再调用<code>resolve()</code>，将<code>then</code>分发至<strong>微任务</strong><code>Event Queue</code>中。此时<strong>微任务</strong><code>Event Queue</code>中包含： <code>process.nextTick</code>和<code>then</code>的回调</li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">1. <code>setTimeout</code></td><td style="text-align:center;">1. <code>process.nextTick</code></td><td style="text-align:center;"><em>1 7</em></td></tr><tr><td style="text-align:center;">-</td><td style="text-align:center;">2. <code>then</code></td><td style="text-align:center;"></td></tr></tbody></table><ul><li>最后遇到<code>setTimeout</code>，同样没有设置延迟时间，则默认为<code>0</code>，将其回调立即分发至<strong>宏任务</strong><code>Event Queue</code>，里面有什么，先不管，还没到他执行，注意区别于前一个<code>setTimeout</code></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">1. <code>setTimeout</code></td><td style="text-align:center;">1. <code>process.nextTick</code></td><td style="text-align:center;"><em>1 7</em></td></tr><tr><td style="text-align:center;">2. <code>setTimeout</code></td><td style="text-align:center;">2. <code>then</code></td><td style="text-align:center;"></td></tr></tbody></table><ul><li><p>至此，整体代码作为<strong>宏任务</strong>执行完毕，主线程此时空闲了，就会去看看<strong>微任务</strong><code>Event Queue</code>中是否有任务，如果有，则将其执行<strong>清空</strong>，此时发现<strong>微任务</strong><code>Event Queue</code>中包含两个任务，则依次将<code>process.nextTick</code>与<code>then</code>添加至主线程执行：</p><p>先执行<code>process.nextTick</code>的回调，<em><strong>此时控制台输出</strong></em> <em>6</em>，然后执行<code>then</code>，此时<em><strong>此时控制台输出</strong></em> <em>8</em></p></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">1. <code>setTimeout</code></td><td style="text-align:center;"></td><td style="text-align:center;"><em>1 7 6 8</em></td></tr><tr><td style="text-align:center;">2. <code>setTimeout</code></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><ul><li>清空完<strong>微任务</strong><code>Event Queue</code>后，至此，<strong>一轮事件循环已结束</strong>，主线程立即进入<strong>下一轮事件循环</strong>，下一轮的事件循环，依旧采用这样的思路进行分析</li></ul><p><strong>第二轮</strong></p><ul><li><p>主线程将<strong>宏任务</strong><code>Evenet Queue</code>中的第一个<code>setTimeout</code><strong>回调</strong>取出执行，首先遇到<code>console.log(&#39;2&#39;)</code>，直接打印，<em><strong>此时控制台输出</strong></em> <em>2</em></p></li><li><p>往下遇到<code>process.nextTick</code>，将其分发至<strong>微任务</strong><code>Event Queue</code>等待</p></li><li><p>往下遇到<code>new Promise</code>，直接执行其中代码，先打印 <em>4</em>，<em><strong>此时控制台输出</strong></em> <em>4</em>，然后执行<code>resolve()</code>，将<code>then</code>分发至<strong>微任务</strong><code>Event Queue</code></p></li><li><p>至此，第二轮事件循环中的<strong>宏任务</strong>执行完毕，现在看看任务队列中都有些什么</p></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">2. <code>setTimeout</code></td><td style="text-align:center;">1. <code>process.nextTick</code></td><td style="text-align:center;"><em>1 7 6 8 2 4</em></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">2. <code>then</code></td><td style="text-align:center;"></td></tr></tbody></table><ul><li><p>此时主线程发现<strong>微任务</strong><code>Event Queue</code>中又有两个任务可执行，然后又依次调用执行并将其清空，首先执行<code>process.nextTick</code>，打印出 <em>3</em>，<em><strong>此时控制台输出</strong></em> <em>3</em></p></li><li><p>然后执行<code>then</code>，打印出 <em>5</em>，<em><strong>此时控制台输出</strong></em> <em>5</em></p></li><li><p><strong>微任务</strong><code>Event Queue</code>执行完毕，<strong>第二轮事件循环正式结束</strong>，此时任务队列如下</p></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;">2. <code>setTimeout</code></td><td style="text-align:center;"></td><td style="text-align:center;"><em>1 7 6 8 2 4 3 5</em></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p><strong>第三轮</strong></p><ul><li><p>主线程再次将<strong>宏任务</strong><code>Event Queue</code>中的第二个<code>setTimeout</code>取出执行，首先就遇到了打印 <em>9</em>，<em><strong>此时控制台输出</strong></em> <em>9</em></p></li><li><p>往下执行遇到<code>process.nextTick</code>，分发至<strong>微任务</strong><code>Event Queue</code>中等待</p></li><li><p>再往下遇到<code>new Promise</code>，执行其中代码，打印出 <em>11</em>，<em><strong>此时控制台输出</strong></em> <em>11</em>，执行<code>resolve()</code>，将<code>then</code>分发至<strong>微任务</strong><code>Event Queue</code>，<strong>宏任务</strong>执行完毕，此时的任务队列如下</p></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:center;">1. <code>process.nextTick</code></td><td style="text-align:center;"><em>1 7 6 8 2 4 3 5 9 11</em></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;">2. <code>then</code></td><td style="text-align:center;"></td></tr></tbody></table><ul><li><p>此时主线程发现<strong>微任务</strong><code>Event Queue</code>中又有任务，于是有依次去取其中的任务到主线程上执行，首先执行<code>process.nextTick</code>，打印出 <em>10</em>，<em><strong>此时控制台输出</strong></em> <em>10</em>，然后执行<code>then</code>，打印出 <em>12</em>，<em><strong>此时控制台输出</strong></em> <em>12</em></p></li><li><p>至此第三轮事件循环也已结束，此时的宏任务Event Queue与微任务Event Queue中都已清空，此时控制台已打印出全部</p></li></ul><table><thead><tr><th style="text-align:center;">宏任务<code>Event Queue</code></th><th style="text-align:center;">微任务<code>Event Queue</code></th><th style="text-align:center;">控制台<code>console</code></th></tr></thead><tbody><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"><em>1 7 6 8 2 4 3 5 9 11 10 12</em></td></tr><tr><td style="text-align:center;"></td><td style="text-align:center;"></td><td style="text-align:center;"></td></tr></tbody></table><p>整段代码，进行了三次事件循环，才执行完毕，打印输出的顺序跟代码顺序毫无相干，可见：理解其中的事件循环机制多么的重要。</p><p>(请注意，<code>node</code>环境下的事件监听依赖<code>libuv</code>与前端环境不完全相同，输出顺序可能会有误差)</p><h2 id="finally" tabindex="-1">Finally <a class="header-anchor" href="#finally" aria-label="Permalink to &quot;Finally&quot;">​</a></h2><ul><li><strong>javascript是一门单线程语言</strong>，不管是什么新框架新语法糖实现的所谓异步，其实都是用同步的方法去模拟的</li><li>事件循环<code>Event Loop</code>是<code>js</code>实现异步的一种方法，也是<code>js</code>的<strong>执行机制</strong></li><li>微任务和宏任务还有很多种类，比如<code>setImmediate</code>等等，执行都是有共同点的</li></ul><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><p><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noreferrer">Post</a></p>`,79),c=[p];function r(E,y,d,i,g,u){return n(),e("div",null,c)}const m=s(t,[["render",r]]);export{F as __pageData,m as default};
