import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.d544cf0e.js";const h=JSON.parse('{"title":"Threejs","description":"","frontmatter":{},"headers":[],"relativePath":"web/threejs.md","filePath":"web/threejs.md","lastUpdated":1692961506000}'),p={name:"web/threejs.md"},o=l(`<h1 id="threejs" tabindex="-1">Threejs <a class="header-anchor" href="#threejs" aria-label="Permalink to &quot;Threejs&quot;">​</a></h1><h2 id="基本概念" tabindex="-1">基本概念 <a class="header-anchor" href="#基本概念" aria-label="Permalink to &quot;基本概念&quot;">​</a></h2><ul><li>场景 Scene</li><li>相机 Camera</li><li>渲染器 Renderer</li></ul><h2 id="物体形状-几何体-geometry" tabindex="-1">物体形状： 几何体 Geometry <a class="header-anchor" href="#物体形状-几何体-geometry" aria-label="Permalink to &quot;物体形状： 几何体 Geometry&quot;">​</a></h2><ul><li>长方体 BoxGeometry</li><li>圆柱体 CylinderGeometry</li><li>球体 SphereGeometry</li><li>圆锥 ConeGeometry</li><li>矩形平面 PlaneGeometry</li><li>圆平面 CircleGeometry</li></ul><h2 id="物体外观-材质-material" tabindex="-1">物体外观： 材质 Material <a class="header-anchor" href="#物体外观-材质-material" aria-label="Permalink to &quot;物体外观： 材质 Material&quot;">​</a></h2><ul><li>网格基础材质 MeshBasicMaterial</li><li>网格漫反射材质 MeshLambertMaterial</li><li>网格高光材质 MeshPhongMaterial</li><li>物理材质 MeshStandardMaterial | MeshPhysicalMaterial</li><li>点材质 PointsMaterial</li><li>线基础材质 LineBasicMaterial</li><li>精灵材质 SpriteMaterial</li></ul><h2 id="物体-网格模型-mesh" tabindex="-1">物体： 网格模型 Mesh <a class="header-anchor" href="#物体-网格模型-mesh" aria-label="Permalink to &quot;物体： 网格模型 Mesh&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 传入几何体geometry、材质material</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(geometry, material)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 传入几何体geometry、材质material</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(geometry, material)</span></span></code></pre></div><h3 id="模型位置-position" tabindex="-1">模型位置： .position <a class="header-anchor" href="#模型位置-position" aria-label="Permalink to &quot;模型位置： .position&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 设置网格模型在三维空间中的位置坐标，默认是坐标原点</span></span>
<span class="line"><span style="color:#E1E4E8;">mesh.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 设置网格模型在三维空间中的位置坐标，默认是坐标原点</span></span>
<span class="line"><span style="color:#24292E;">mesh.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span></code></pre></div><h3 id="添加网格模型到场景-scene-add" tabindex="-1">添加网格模型到场景 scene.add <a class="header-anchor" href="#添加网格模型到场景-scene-add" aria-label="Permalink to &quot;添加网格模型到场景 scene.add&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh)</span></span></code></pre></div><h2 id="相机" tabindex="-1">相机 <a class="header-anchor" href="#相机" aria-label="Permalink to &quot;相机&quot;">​</a></h2><ul><li>OrthographicCamera 正投影相机</li><li>PerspectiveCamera 透视投影相机</li></ul><h3 id="perspectivecamera-透视投影相机" tabindex="-1">PerspectiveCamera 透视投影相机 <a class="header-anchor" href="#perspectivecamera-透视投影相机" aria-label="Permalink to &quot;PerspectiveCamera 透视投影相机&quot;">​</a></h3><p>本质上是模拟人眼观察这个世界的规律，透视投影相机的四个参数 fov, aspect, near, far 构成一个四棱台3D空间，被称为视锥体，只有视锥体之内的物体，才会渲染出来，视锥体范围之外的物体不会显示在Canvas画布上。</p><p>宽高比 aspect = width / height</p><table><thead><tr><th>参数</th><th>含义</th><th>默认值</th></tr></thead><tbody><tr><td>fov</td><td>相机视椎体竖直方向视野角度</td><td>50</td></tr><tr><td>aspect</td><td>相机视椎体水平方向和竖直方向长度比，一般设置为 Canvas 画布宽高比 width/height</td><td>1</td></tr><tr><td>near</td><td>相机视椎体近裁界面相对相机距离</td><td>0.1</td></tr><tr><td>far</td><td>相机视椎体远裁面相对相机距离，far-near构成了视椎体高度方向</td><td>2000</td></tr></tbody></table><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 实例化一个透视投影相机对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">camera</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">PerspectiveCamera</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 实例化一个透视投影相机对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">camera</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">PerspectiveCamera</span><span style="color:#24292E;">()</span></span></code></pre></div><h4 id="相机位置-position" tabindex="-1">相机位置 .position <a class="header-anchor" href="#相机位置-position" aria-label="Permalink to &quot;相机位置 .position&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">camera.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">camera.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">)</span></span></code></pre></div><h4 id="相机观察目标-lookat" tabindex="-1">相机观察目标 .lookAt() <a class="header-anchor" href="#相机观察目标-lookat" aria-label="Permalink to &quot;相机观察目标 .lookAt()&quot;">​</a></h4><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">camera.</span><span style="color:#B392F0;">lookAt</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">camera.</span><span style="color:#B392F0;">lookAt</span><span style="color:#E1E4E8;">(mesh.position)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">camera.</span><span style="color:#6F42C1;">lookAt</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">camera.</span><span style="color:#6F42C1;">lookAt</span><span style="color:#24292E;">(mesh.position)</span></span></code></pre></div><h2 id="webgl-渲染器-webglrenderer" tabindex="-1">WebGL 渲染器 WebGLRenderer <a class="header-anchor" href="#webgl-渲染器-webglrenderer" aria-label="Permalink to &quot;WebGL 渲染器 WebGLRenderer&quot;">​</a></h2><h3 id="创建渲染器对象" tabindex="-1">创建渲染器对象 <a class="header-anchor" href="#创建渲染器对象" aria-label="Permalink to &quot;创建渲染器对象&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建渲染器对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">WebGLRenderer</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建渲染器对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">WebGLRenderer</span><span style="color:#24292E;">()</span></span></code></pre></div><h3 id="设置-canvas-画布尺寸-setsize" tabindex="-1">设置 Canvas 画布尺寸 .setSize() <a class="header-anchor" href="#设置-canvas-画布尺寸-setsize" aria-label="Permalink to &quot;设置 Canvas 画布尺寸 .setSize()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 定义threejs输出画布的尺寸(单位:像素px)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">width</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">800</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//宽度</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">height</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">500</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//高度</span></span>
<span class="line"><span style="color:#E1E4E8;">renderer.</span><span style="color:#B392F0;">setSize</span><span style="color:#E1E4E8;">(width, height); </span><span style="color:#6A737D;">//设置three.js渲染区域的尺寸(像素px)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 定义threejs输出画布的尺寸(单位:像素px)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">width</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">800</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//宽度</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">height</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">500</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//高度</span></span>
<span class="line"><span style="color:#24292E;">renderer.</span><span style="color:#6F42C1;">setSize</span><span style="color:#24292E;">(width, height); </span><span style="color:#6A737D;">//设置three.js渲染区域的尺寸(像素px)</span></span></code></pre></div><h3 id="渲染器-canvas-画布属性-domelement" tabindex="-1">渲染器 Canvas 画布属性 .domElement <a class="header-anchor" href="#渲染器-canvas-画布属性-domelement" aria-label="Permalink to &quot;渲染器 Canvas 画布属性 .domElement&quot;">​</a></h3><p>渲染器 WebGLRenderer 通过属性 .domElement 可以获得渲染方法 .render() 生成的 Canvas 画布，.domElement 本质上就是一个 HTML 元素： Canvas 画布。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(renderer.domElement);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(renderer.domElement);</span></span></code></pre></div><h3 id="渲染器方法-render" tabindex="-1">渲染器方法 .render() <a class="header-anchor" href="#渲染器方法-render" aria-label="Permalink to &quot;渲染器方法 .render()&quot;">​</a></h3><p>渲染器 WebGLRenderer 执行渲染方法 .render() 就可以生成一个 Canvas画布(照片)，并把三维场景 Scene 呈现在 canvas 画布上面，你可以把 .render() 理解为相机的拍照动作“咔”。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera); </span><span style="color:#6A737D;">//执行渲染操作</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera); </span><span style="color:#6A737D;">//执行渲染操作</span></span></code></pre></div><h3 id="让物体动起来" tabindex="-1">让物体动起来 <a class="header-anchor" href="#让物体动起来" aria-label="Permalink to &quot;让物体动起来&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 使用 requestAnimationFrame 渲染</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(render);</span></span>
<span class="line"><span style="color:#E1E4E8;">  mesh.rotation.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  mesh.rotation.y </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 使用 requestAnimationFrame 渲染</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(render);</span></span>
<span class="line"><span style="color:#24292E;">  mesh.rotation.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  mesh.rotation.y </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">();</span></span></code></pre></div><h2 id="三维坐标系" tabindex="-1">三维坐标系 <a class="header-anchor" href="#三维坐标系" aria-label="Permalink to &quot;三维坐标系&quot;">​</a></h2><h3 id="辅助观察坐标系" tabindex="-1">辅助观察坐标系 <a class="header-anchor" href="#辅助观察坐标系" aria-label="Permalink to &quot;辅助观察坐标系&quot;">​</a></h3><p>THREE.AxesHelper() 的参数表示坐标系坐标轴线段尺寸大小，你可以根据需要改变尺寸。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">axesHelper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">AxesHelper</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">150</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(axesHelper)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">axesHelper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">AxesHelper</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">150</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(axesHelper)</span></span></code></pre></div><p>three.js 坐标轴颜色红R、绿G、蓝B分别对应坐标系的x、y、z轴，对于 three.js 的3D坐标系默认y轴朝上。</p><h2 id="光源" tabindex="-1">光源 <a class="header-anchor" href="#光源" aria-label="Permalink to &quot;光源&quot;">​</a></h2><p>基础材质不受光照影响，漫反射材质、高光材质、物理材质 受光照影响</p><ul><li>环境光 AmbientLight</li><li>点光源 PointLight</li><li>聚光灯光源 SpotLight</li><li>平行光 DirectionalLight</li></ul><h3 id="生成光源" tabindex="-1">生成光源 <a class="header-anchor" href="#生成光源" aria-label="Permalink to &quot;生成光源&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//点光源：两个参数分别表示光源颜色和光照强度</span></span>
<span class="line"><span style="color:#6A737D;">// 参数1：0xffffff是纯白光,表示光源颜色</span></span>
<span class="line"><span style="color:#6A737D;">// 参数2：1.0,表示光照强度，可以根据需要调整</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pointLight</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">PointLight</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0xffffff</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1.0</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//点光源：两个参数分别表示光源颜色和光照强度</span></span>
<span class="line"><span style="color:#6A737D;">// 参数1：0xffffff是纯白光,表示光源颜色</span></span>
<span class="line"><span style="color:#6A737D;">// 参数2：1.0,表示光照强度，可以根据需要调整</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pointLight</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">PointLight</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0xffffff</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1.0</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="光源位置" tabindex="-1">光源位置 <a class="header-anchor" href="#光源位置" aria-label="Permalink to &quot;光源位置&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//点光源位置</span></span>
<span class="line"><span style="color:#E1E4E8;">pointLight.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//点光源放在x轴上</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//点光源位置</span></span>
<span class="line"><span style="color:#24292E;">pointLight.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//点光源放在x轴上</span></span></code></pre></div><h3 id="添加光源到场景中" tabindex="-1">添加光源到场景中 <a class="header-anchor" href="#添加光源到场景中" aria-label="Permalink to &quot;添加光源到场景中&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(directionalLight); </span><span style="color:#6A737D;">//点光源添加到场景中</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(directionalLight); </span><span style="color:#6A737D;">//点光源添加到场景中</span></span></code></pre></div><h2 id="点光源辅助观察-pointlighthelper" tabindex="-1">点光源辅助观察 PointLightHelper <a class="header-anchor" href="#点光源辅助观察-pointlighthelper" aria-label="Permalink to &quot;点光源辅助观察 PointLightHelper&quot;">​</a></h2><p>通过点光源辅助观察对象 PointLightHelper 可视化光源</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 光源辅助观察</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pointLightHelper</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">PointLightHelper</span><span style="color:#E1E4E8;">(pointLight, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(pointLightHelper)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 光源辅助观察</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pointLightHelper</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">PointLightHelper</span><span style="color:#24292E;">(pointLight, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(pointLightHelper)</span></span></code></pre></div><h2 id="相机控件-orbitcontrols" tabindex="-1">相机控件 OrbitControls <a class="header-anchor" href="#相机控件-orbitcontrols" aria-label="Permalink to &quot;相机控件 OrbitControls&quot;">​</a></h2><p>开发时可以通过相机控件 OrbitControls 实现旋转缩放预览效果。需要另外引入轨道控制器扩展库OrbitControls.js。</p><ul><li>旋转： 拖动鼠标左键</li><li>缩放： 滚动鼠标中键</li><li>平移： 拖动鼠标右键</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引入轨道控制器扩展库OrbitControls.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { OrbitControls } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;three/addons/controls/OrbitControls.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置相机控件轨道控制器OrbitControls</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">controls</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">OrbitControls</span><span style="color:#E1E4E8;">(camera, renderer.domElement);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果OrbitControls改变了相机参数，重新调用渲染器渲染三维场景</span></span>
<span class="line"><span style="color:#E1E4E8;">controls.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;change&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// renderer.render(scene, camera); //执行渲染操作， 在render 里渲染了这里就不用重复了</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 浏览器控制台查看相机位置变化</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;camera.position&#39;</span><span style="color:#E1E4E8;">,camera.position);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span><span style="color:#6A737D;">//监听鼠标、键盘事件</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引入轨道控制器扩展库OrbitControls.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { OrbitControls } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;three/addons/controls/OrbitControls.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 设置相机控件轨道控制器OrbitControls</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">controls</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">OrbitControls</span><span style="color:#24292E;">(camera, renderer.domElement);</span></span>
<span class="line"><span style="color:#6A737D;">// 如果OrbitControls改变了相机参数，重新调用渲染器渲染三维场景</span></span>
<span class="line"><span style="color:#24292E;">controls.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;change&#39;</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// renderer.render(scene, camera); //执行渲染操作， 在render 里渲染了这里就不用重复了</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 浏览器控制台查看相机位置变化</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;camera.position&#39;</span><span style="color:#24292E;">,camera.position);</span></span>
<span class="line"><span style="color:#24292E;">});</span><span style="color:#6A737D;">//监听鼠标、键盘事件</span></span></code></pre></div><p>OrbitControls 本质上就是改变相机的参数，比如相机的位置属性，改变相机位置也可以改变相机拍照场景中模型的角度，实现模型的360度旋转预览效果，改变透视投影相机距离模型的距离，就可以改变相机能看到的视野范围</p><h2 id="全屏渲染" tabindex="-1">全屏渲染 <a class="header-anchor" href="#全屏渲染" aria-label="Permalink to &quot;全屏渲染&quot;">​</a></h2><p>使用 window.innerWidth 、window.innerHeight 设置画布宽高。记得设置 css</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#85E89D;">body</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">overflow</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">hidden</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">margin</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">0</span><span style="color:#F97583;">px</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#22863A;">body</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">overflow</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">hidden</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">margin</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">0</span><span style="color:#D73A49;">px</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="画布大小变化" tabindex="-1">画布大小变化 <a class="header-anchor" href="#画布大小变化" aria-label="Permalink to &quot;画布大小变化&quot;">​</a></h3><p>canvas 画布宽高动态变化，需要更新相机和渲染参数，否则无法正常渲染</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 窗口大小变化</span></span>
<span class="line"><span style="color:#E1E4E8;">window.</span><span style="color:#B392F0;">resize</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 重置渲染器尺寸</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">setSize</span><span style="color:#E1E4E8;">(window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 全屏下，设置观察范围长宽比 aspect 为窗口宽高比</span></span>
<span class="line"><span style="color:#E1E4E8;">  camera.aspect </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> window.innerWidth </span><span style="color:#F97583;">/</span><span style="color:#E1E4E8;"> window.innerHeight;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 渲染器执行 renderer 方法的时候会读取相机对象的投影矩阵属性 projectionMatrix</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 但是不会每渲染一帧，就通过相机的属性计算投影矩阵，节约计算资源</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 如果相机的一些属性发生了变化，需要执行 updateProjectionMatrix() 方法更新相机的投影矩阵</span></span>
<span class="line"><span style="color:#E1E4E8;">  camera.</span><span style="color:#B392F0;">updateProjectionMatrix</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 窗口大小变化</span></span>
<span class="line"><span style="color:#24292E;">window.</span><span style="color:#6F42C1;">resize</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 重置渲染器尺寸</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">setSize</span><span style="color:#24292E;">(window.innerWidth, window.innerHeight);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 全屏下，设置观察范围长宽比 aspect 为窗口宽高比</span></span>
<span class="line"><span style="color:#24292E;">  camera.aspect </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> window.innerWidth </span><span style="color:#D73A49;">/</span><span style="color:#24292E;"> window.innerHeight;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 渲染器执行 renderer 方法的时候会读取相机对象的投影矩阵属性 projectionMatrix</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 但是不会每渲染一帧，就通过相机的属性计算投影矩阵，节约计算资源</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 如果相机的一些属性发生了变化，需要执行 updateProjectionMatrix() 方法更新相机的投影矩阵</span></span>
<span class="line"><span style="color:#24292E;">  camera.</span><span style="color:#6F42C1;">updateProjectionMatrix</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="stats-js-查看-threejs-渲染帧率" tabindex="-1">stats.js 查看 threejs 渲染帧率 <a class="header-anchor" href="#stats-js-查看-threejs-渲染帧率" aria-label="Permalink to &quot;stats.js 查看 threejs 渲染帧率&quot;">​</a></h2><p>threejs 每执行 WebGL 渲染器的 .render() 方法一次，就在画布上得到一帧图像，所以场景越复杂则渲染性能越低，也就每秒钟执行 .render() 的次数越低。</p><p>通过 stats.js 库可以查看 threejs 当前的渲染性能，即渲染帧率（FPS），一般渲染达到每秒 60 次为最佳状态。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引入 stats.js</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Stats </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;three/addons/libs/stats.module.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建 stats 对象</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">stats</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Stats</span><span style="color:#E1E4E8;">()</span></span>
<span class="line"><span style="color:#E1E4E8;">document.body.</span><span style="color:#B392F0;">appendChild</span><span style="color:#E1E4E8;">(stats.domElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 渲染函数</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 requestAnimationFrame 渲染</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 调用 stats.update</span></span>
<span class="line"><span style="color:#E1E4E8;">  stats.</span><span style="color:#B392F0;">update</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  mesh.rotation.x </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  mesh.rotation.y </span><span style="color:#F97583;">+=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0.01</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// light.rotation.x += 0.1;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// light.rotation.y += 0.1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 渲染</span></span>
<span class="line"><span style="color:#E1E4E8;">  renderer.</span><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">(scene, camera);</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">requestAnimationFrame</span><span style="color:#E1E4E8;">(render);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">render</span><span style="color:#E1E4E8;">();</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引入 stats.js</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> Stats </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;three/addons/libs/stats.module.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建 stats 对象</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">stats</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Stats</span><span style="color:#24292E;">()</span></span>
<span class="line"><span style="color:#24292E;">document.body.</span><span style="color:#6F42C1;">appendChild</span><span style="color:#24292E;">(stats.domElement)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 渲染函数</span></span>
<span class="line"><span style="color:#6A737D;">// 使用 requestAnimationFrame 渲染</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">render</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 调用 stats.update</span></span>
<span class="line"><span style="color:#24292E;">  stats.</span><span style="color:#6F42C1;">update</span><span style="color:#24292E;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  mesh.rotation.x </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  mesh.rotation.y </span><span style="color:#D73A49;">+=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0.01</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// light.rotation.x += 0.1;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// light.rotation.y += 0.1;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 渲染</span></span>
<span class="line"><span style="color:#24292E;">  renderer.</span><span style="color:#6F42C1;">render</span><span style="color:#24292E;">(scene, camera);</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">requestAnimationFrame</span><span style="color:#24292E;">(render);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">render</span><span style="color:#24292E;">();</span></span></code></pre></div><h3 id="stats-setmode-mode" tabindex="-1">stats.setMode(mode) <a class="header-anchor" href="#stats-setmode-mode" aria-label="Permalink to &quot;stats.setMode(mode)&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// stats.domElement显示：渲染帧率  刷新频率 和 一秒渲染次数 </span></span>
<span class="line"><span style="color:#E1E4E8;">stats.</span><span style="color:#B392F0;">setMode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">);</span><span style="color:#6A737D;">//默认模式</span></span>
<span class="line"><span style="color:#6A737D;">//stats.domElement显示：渲染周期 渲染一帧多长时间(单位：毫秒ms)</span></span>
<span class="line"><span style="color:#E1E4E8;">stats.</span><span style="color:#B392F0;">setMode</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// stats.domElement显示：渲染帧率  刷新频率 和 一秒渲染次数 </span></span>
<span class="line"><span style="color:#24292E;">stats.</span><span style="color:#6F42C1;">setMode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">);</span><span style="color:#6A737D;">//默认模式</span></span>
<span class="line"><span style="color:#6A737D;">//stats.domElement显示：渲染周期 渲染一帧多长时间(单位：毫秒ms)</span></span>
<span class="line"><span style="color:#24292E;">stats.</span><span style="color:#6F42C1;">setMode</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span></code></pre></div><h3 id="性能测试" tabindex="-1">性能测试 <a class="header-anchor" href="#性能测试" aria-label="Permalink to &quot;性能测试&quot;">​</a></h3><p>控制长方体模型数量，增加或减少看看帧率变化，这也与电脑性能有关</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getRandomColor</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> hex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Math.</span><span style="color:#B392F0;">floor</span><span style="color:#E1E4E8;">(Math.</span><span style="color:#B392F0;">random</span><span style="color:#E1E4E8;">() </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">16777216</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">toString</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">16</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;">(hex.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    hex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> hex;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;#&#39;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> hex;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 随机创建大量的模型,测试渲染性能，调整 num 值查看页面帧率变化</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">num</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">//控制长方体模型数量</span></span>
<span class="line"><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; i </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> num; i</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; j </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> num; j</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">for</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">; k </span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;"> num; k</span><span style="color:#F97583;">++</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">geometry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">BoxGeometry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">material</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshLambertMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        color: </span><span style="color:#B392F0;">getRandomColor</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">        transparent: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        opacity: </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mesh</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(geometry, material);</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 随机生成长方体xyz坐标</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">x</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> i </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">y</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> k </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">z</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> j </span><span style="color:#F97583;">*</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#E1E4E8;">      mesh.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(x, y, z)</span></span>
<span class="line"><span style="color:#E1E4E8;">      scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh); </span><span style="color:#6A737D;">// 模型对象插入场景中</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getRandomColor</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> hex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Math.</span><span style="color:#6F42C1;">floor</span><span style="color:#24292E;">(Math.</span><span style="color:#6F42C1;">random</span><span style="color:#24292E;">() </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">16777216</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">toString</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">16</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;">(hex.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    hex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> hex;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;#&#39;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> hex;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6A737D;">// 随机创建大量的模型,测试渲染性能，调整 num 值查看页面帧率变化</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">num</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">; </span><span style="color:#6A737D;">//控制长方体模型数量</span></span>
<span class="line"><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; i </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num; i</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; j </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num; j</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">for</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">; k </span><span style="color:#D73A49;">&lt;</span><span style="color:#24292E;"> num; k</span><span style="color:#D73A49;">++</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">geometry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">BoxGeometry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">material</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshLambertMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        color: </span><span style="color:#6F42C1;">getRandomColor</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">        transparent: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        opacity: </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      });</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mesh</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(geometry, material);</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 随机生成长方体xyz坐标</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">x</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> i </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">y</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> k </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">z</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> j </span><span style="color:#D73A49;">*</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#24292E;">      mesh.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(x, y, z)</span></span>
<span class="line"><span style="color:#24292E;">      scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh); </span><span style="color:#6A737D;">// 模型对象插入场景中</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="几何体双面可见" tabindex="-1">几何体双面可见 <a class="header-anchor" href="#几何体双面可见" aria-label="Permalink to &quot;几何体双面可见&quot;">​</a></h2><p>threejs 的材质默认正面可见，反面不可见，对于矩形平面 PlaneGeometry、圆形平面 如果想看到两面，可以设置 side: THREE.DoubleSide</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">//默认只有正面可见</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  side: </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.FrontSide,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 设置 两面可见</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshBasicMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  side: </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.DoubleSide,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">//默认只有正面可见</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  side: </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.FrontSide,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 设置 两面可见</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshBasicMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  side: </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.DoubleSide,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="高光材质" tabindex="-1">高光材质 <a class="header-anchor" href="#高光材质" aria-label="Permalink to &quot;高光材质&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 球体 几何体</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sphereGeometry</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">SphereGeometry</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 高光网格材质</span></span>
<span class="line"><span style="color:#6A737D;">// 模拟镜面反射，产生一个高光效果</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">phongMaterial</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">MeshPhongMaterial</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  color: </span><span style="color:#79B8FF;">0xF80888</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  shininess: </span><span style="color:#79B8FF;">40</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//高光部分的亮度，默认30</span></span>
<span class="line"><span style="color:#E1E4E8;">  specular: </span><span style="color:#79B8FF;">0xFFFFFF</span><span style="color:#E1E4E8;">, </span><span style="color:#6A737D;">//高光部分的颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 网格模型</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">mesh2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">Mesh</span><span style="color:#E1E4E8;">(sphereGeometry, phongMaterial);</span></span>
<span class="line"><span style="color:#6A737D;">// 网格模型位置，默认原点</span></span>
<span class="line"><span style="color:#E1E4E8;">mesh2.position.</span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">20</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">10</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">scene.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh2);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 球体 几何体</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sphereGeometry</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">SphereGeometry</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 高光网格材质</span></span>
<span class="line"><span style="color:#6A737D;">// 模拟镜面反射，产生一个高光效果</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">phongMaterial</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">MeshPhongMaterial</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  color: </span><span style="color:#005CC5;">0xF80888</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  shininess: </span><span style="color:#005CC5;">40</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//高光部分的亮度，默认30</span></span>
<span class="line"><span style="color:#24292E;">  specular: </span><span style="color:#005CC5;">0xFFFFFF</span><span style="color:#24292E;">, </span><span style="color:#6A737D;">//高光部分的颜色</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 网格模型</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">mesh2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">Mesh</span><span style="color:#24292E;">(sphereGeometry, phongMaterial);</span></span>
<span class="line"><span style="color:#6A737D;">// 网格模型位置，默认原点</span></span>
<span class="line"><span style="color:#24292E;">mesh2.position.</span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">10</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">20</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">10</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">scene.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh2);</span></span></code></pre></div><h2 id="webgl-渲染器设置" tabindex="-1">WebGL 渲染器设置 <a class="header-anchor" href="#webgl-渲染器设置" aria-label="Permalink to &quot;WebGL 渲染器设置&quot;">​</a></h2><h3 id="渲染器锯齿属性-antialias" tabindex="-1">渲染器锯齿属性 .antialias <a class="header-anchor" href="#渲染器锯齿属性-antialias" aria-label="Permalink to &quot;渲染器锯齿属性 .antialias&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 开启锯齿模糊，几何体过渡更加平滑自然</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">renderer</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">THREE</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">WebGLRenderer</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  antialias: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 或者</span></span>
<span class="line"><span style="color:#E1E4E8;">renderer.antialias </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 开启锯齿模糊，几何体过渡更加平滑自然</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">renderer</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">THREE</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">WebGLRenderer</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  antialias: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">});</span></span>
<span class="line"><span style="color:#6A737D;">// 或者</span></span>
<span class="line"><span style="color:#24292E;">renderer.antialias </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">;</span></span></code></pre></div><h3 id="设备像素比-setpixelratio" tabindex="-1">设备像素比 .setPixelRatio() <a class="header-anchor" href="#设备像素比-setpixelratio" aria-label="Permalink to &quot;设备像素比 .setPixelRatio()&quot;">​</a></h3><p>如果你遇到你的 canvas 画布输出模糊问题，注意设置 renderer.setPixelRatio(window.devicePixelRatio)</p><p>注意：注意你的硬件设备设备像素比window.devicePixelRatio刚好是1，那么是否执行.setPixelRatio()不会有明显差异，不过为了适应不同的硬件设备屏幕，通常需要执行该方法。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 获取你屏幕对应的设备像素比.devicePixelRatio告诉threejs,以免渲染模糊问题</span></span>
<span class="line"><span style="color:#E1E4E8;">renderer.</span><span style="color:#B392F0;">setPixelRatio</span><span style="color:#E1E4E8;">(window.devicePixelRatio);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 获取你屏幕对应的设备像素比.devicePixelRatio告诉threejs,以免渲染模糊问题</span></span>
<span class="line"><span style="color:#24292E;">renderer.</span><span style="color:#6F42C1;">setPixelRatio</span><span style="color:#24292E;">(window.devicePixelRatio);</span></span></code></pre></div><h3 id="设置背景颜色-setclearcolor" tabindex="-1">设置背景颜色 .setClearColor() <a class="header-anchor" href="#设置背景颜色-setclearcolor" aria-label="Permalink to &quot;设置背景颜色 .setClearColor()&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">renderer.</span><span style="color:#B392F0;">setClearColor</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">0x444444</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">//设置背景颜色</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">renderer.</span><span style="color:#6F42C1;">setClearColor</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">0x444444</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">//设置背景颜色</span></span></code></pre></div><h2 id="gui-js-库-可视化改变三维场景" tabindex="-1">gui.js 库 - 可视化改变三维场景 <a class="header-anchor" href="#gui-js-库-可视化改变三维场景" aria-label="Permalink to &quot;gui.js 库 - 可视化改变三维场景&quot;">​</a></h2><p>dat.gui.js 是一个前端js库，对HTML、CSS和JavaScript进行了封装，借助dat.gui.js可以快速创建控制三维场景的UI交互界面，场景中的参数往往需要以可视化的方式调试出来。</p><p>gui 实例主要包含以下方法：</p><ul><li>.add(控制对象，对象具体属性，其他参数) 其他参数一般是对象具体属性可调试的数值区间</li><li>.name(属性命名) 设置属性命名</li><li>.step(步长) 设置步长</li><li>.addColor(控制对象, &#39;color&#39;) 生成颜色值改变的交互界面</li><li>.onChange((value) =&gt; {}) 属性改变时触发</li></ul><h3 id="add-方法中的参数" tabindex="-1">.add 方法中的参数 <a class="header-anchor" href="#add-方法中的参数" aria-label="Permalink to &quot;.add 方法中的参数&quot;">​</a></h3><ul><li>参数3和参数4 分别是数字，交互界面是拖动条</li><li>参数3 是数组，则交互界面是下拉菜单</li><li>参数3 是对象，则交互界面是下拉菜单</li><li>如果 .add 改变属性的对应的数据类型如果是布尔值，则交互界面是一个单选框</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 引入dat.gui.js的一个类GUI</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { GUI } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;three/addons/libs/lil-gui.module.min.js&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个GUI</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">gui</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">GUI</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">//改变交互界面style属性</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.domElement.style.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;0px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.domElement.style.width </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;300px&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 通过GUI改变对象属性，其余参数为数值</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(pointLight, </span><span style="color:#9ECBFF;">&#39;intensity&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2.0</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;环境光强度&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh.position, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">step</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;y轴&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// .add 的其余参数为对象 、 数组，gui界面为下拉选择</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(material, </span><span style="color:#9ECBFF;">&#39;transparent&#39;</span><span style="color:#E1E4E8;">, { 开: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, 关: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;开启透明&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(material, </span><span style="color:#9ECBFF;">&#39;opacity&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;透明度&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// .add 的其余参数为 布尔值</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isMove</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { bool: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(isMove, </span><span style="color:#9ECBFF;">&#39;bool&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;矩形动画&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 球体颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">gui.</span><span style="color:#B392F0;">addColor</span><span style="color:#E1E4E8;">(phongMaterial, </span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;球体颜色&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// renderer.setClearColor(color, 1);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 引入dat.gui.js的一个类GUI</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { GUI } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;three/addons/libs/lil-gui.module.min.js&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建一个GUI</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">gui</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">GUI</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">//改变交互界面style属性</span></span>
<span class="line"><span style="color:#24292E;">gui.domElement.style.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;0px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">gui.domElement.style.width </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;300px&#39;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">// 通过GUI改变对象属性，其余参数为数值</span></span>
<span class="line"><span style="color:#24292E;">gui.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(pointLight, </span><span style="color:#032F62;">&#39;intensity&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2.0</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;环境光强度&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">gui.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh.position, </span><span style="color:#032F62;">&#39;y&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">step</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;y轴&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// .add 的其余参数为对象 、 数组，gui界面为下拉选择</span></span>
<span class="line"><span style="color:#24292E;">gui.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(material, </span><span style="color:#032F62;">&#39;transparent&#39;</span><span style="color:#24292E;">, { 开: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, 关: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;开启透明&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">gui.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(material, </span><span style="color:#032F62;">&#39;opacity&#39;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;透明度&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// .add 的其余参数为 布尔值</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isMove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { bool: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">gui.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(isMove, </span><span style="color:#032F62;">&#39;bool&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;矩形动画&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 球体颜色</span></span>
<span class="line"><span style="color:#24292E;">gui.</span><span style="color:#6F42C1;">addColor</span><span style="color:#24292E;">(phongMaterial, </span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;球体颜色&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">color</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// renderer.setClearColor(color, 1);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h3 id="gui界面分组-addfolder" tabindex="-1">gui界面分组 .addFolder() <a class="header-anchor" href="#gui界面分组-addfolder" aria-label="Permalink to &quot;gui界面分组 .addFolder()&quot;">​</a></h3><p>gui 页面分组可 嵌套</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 创建子菜单</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">boxFolder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gui.</span><span style="color:#B392F0;">addFolder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;矩形&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 折叠，对应的 .open() , 默认是 open</span></span>
<span class="line"><span style="color:#E1E4E8;">boxFolder.</span><span style="color:#B392F0;">close</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">boxFolder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(mesh.position, </span><span style="color:#9ECBFF;">&#39;y&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">30</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">step</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;y轴&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">isMove</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { bool: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#E1E4E8;">boxFolder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(isMove, </span><span style="color:#9ECBFF;">&#39;bool&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;矩形动画&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 嵌套子菜单</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">transparentFolder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> boxFolder.</span><span style="color:#B392F0;">addFolder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;透明&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">transparentFolder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(material, </span><span style="color:#9ECBFF;">&#39;transparent&#39;</span><span style="color:#E1E4E8;">, { 开: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">, 关: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">}).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;开启透明&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">transparentFolder.</span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(material, </span><span style="color:#9ECBFF;">&#39;opacity&#39;</span><span style="color:#E1E4E8;">, [</span><span style="color:#79B8FF;">0.2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.6</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">0.8</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;透明度&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建子菜单</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sphereFolder</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> gui.</span><span style="color:#B392F0;">addFolder</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;球体&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 球体颜色</span></span>
<span class="line"><span style="color:#E1E4E8;">sphereFolder.</span><span style="color:#B392F0;">addColor</span><span style="color:#E1E4E8;">(phongMaterial, </span><span style="color:#9ECBFF;">&#39;color&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;球体颜色&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">onChange</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">color</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// renderer.setClearColor(color, 1);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 创建子菜单</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">boxFolder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gui.</span><span style="color:#6F42C1;">addFolder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;矩形&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 折叠，对应的 .open() , 默认是 open</span></span>
<span class="line"><span style="color:#24292E;">boxFolder.</span><span style="color:#6F42C1;">close</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">boxFolder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(mesh.position, </span><span style="color:#032F62;">&#39;y&#39;</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">30</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">step</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;y轴&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">isMove</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { bool: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#24292E;">boxFolder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(isMove, </span><span style="color:#032F62;">&#39;bool&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;矩形动画&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 嵌套子菜单</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">transparentFolder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> boxFolder.</span><span style="color:#6F42C1;">addFolder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;透明&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">transparentFolder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(material, </span><span style="color:#032F62;">&#39;transparent&#39;</span><span style="color:#24292E;">, { 开: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">, 关: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">}).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;开启透明&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">transparentFolder.</span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(material, </span><span style="color:#032F62;">&#39;opacity&#39;</span><span style="color:#24292E;">, [</span><span style="color:#005CC5;">0.2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.6</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">0.8</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;透明度&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 创建子菜单</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sphereFolder</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> gui.</span><span style="color:#6F42C1;">addFolder</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;球体&#39;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#6A737D;">// 球体颜色</span></span>
<span class="line"><span style="color:#24292E;">sphereFolder.</span><span style="color:#6F42C1;">addColor</span><span style="color:#24292E;">(phongMaterial, </span><span style="color:#032F62;">&#39;color&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">name</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;球体颜色&#39;</span><span style="color:#24292E;">).</span><span style="color:#6F42C1;">onChange</span><span style="color:#24292E;">(</span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">color</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// renderer.setClearColor(color, 1);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="html-demo" tabindex="-1">html-demo <a class="header-anchor" href="#html-demo" aria-label="Permalink to &quot;html-demo&quot;">​</a></h2><p><a href="https://gitee.com/lafen/threejs-html-demo" target="_blank" rel="noreferrer">threejs-html-demo</a></p>`,100),e=[o];function t(c,r,E,y,i,d){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{h as __pageData,C as default};
