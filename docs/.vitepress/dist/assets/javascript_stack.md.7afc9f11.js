import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a638f038.js";const p="/site/assets/stack-func-call.86f9e234.webp",o="/site/assets/stack-func-call-full.eff4704a.webp",e="/site/assets/stack-call-stack-1.fcfee632.webp",c="/site/assets/stack-call-stack-2.b71f139c.webp",t="/site/assets/stack-call-stack-3.fc06788a.webp",r="/site/assets/stack-call-stack-4.a81d92ff.webp",E="/site/assets/stack-call-stack-5.e8d40414.webp",y="/site/assets/stack-call-stack-6.10efe8c0.webp",i="/site/assets/stack-call-stack-7.346922f0.webp",d="/site/assets/stack-call-stack-8.00004fb1.webp",B=JSON.parse('{"title":"JS 调用栈 和 栈溢出","description":"","frontmatter":{},"headers":[],"relativePath":"javascript/stack.md","filePath":"javascript/stack.md"}'),F={name:"javascript/stack.md"},u=l(`<h1 id="js-调用栈-和-栈溢出" tabindex="-1">JS 调用栈 和 栈溢出 <a class="header-anchor" href="#js-调用栈-和-栈溢出" aria-label="Permalink to &quot;JS 调用栈 和 栈溢出&quot;">​</a></h1><p>什么样的代码才会在执行之前进入编译，并生成执行上下文，一般来说，有以下三种情况</p><ul><li>当 <code>JavaScript</code> 执行全局代码的时候，会编译全局代码并创建全局执行上下文，而且在整个页面的生存周期内，全局执行上下文只有一份</li><li>当调用一个函数的时候，函数体内的代码会被编译，并创建函数执行上下文，一般情况下，函数执行结束之后，创建的函数执行上下文会被销毁</li><li>当使用 <code>eval</code> 函数的时候， <code>eval</code> 的代码也会被编译，并创建执行上下文</li></ul><p>函数的执行上下文中储存了一个函数的信息，而且 函数 是可以调用另一个函数的，这个时候的执行上下文信息该如何保存呢？这就是调用栈的功能。</p><p><strong>调用栈就是用来管理函数调用关系的一种数据结构。</strong></p><h2 id="函数调用" tabindex="-1">函数调用 <a class="header-anchor" href="#函数调用" aria-label="Permalink to &quot;函数调用&quot;">​</a></h2><p>根据以下例子理解函数调用时的执行上下文创建过程</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">  a</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">b</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">  a</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">b</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">add</span><span style="color:#24292E;">()</span></span></code></pre></div><ul><li><p>编译代码，创建全局执行上下文，其中的变量环境对象中包含了声明的变量和函数，如下图 <img src="`+p+'" alt="stack-func-call"></p></li><li><p>执行代码，开始执行全局代码，执行到 <code>add()</code> 这里， <code>js</code> 引擎会之别到这是一个函数调用，随即开始编译 <code>add</code> 函数内部代码</p><ul><li>从全局上下文中取出 <code>add</code> 函数代码</li><li>编译 <code>add</code> 函数代码，并创建函数的 执行上下文 和 可执行代码</li><li>最后执行代码</li></ul></li></ul><p>完整流程如下（ <code>js</code> 是边解释边执行的语言 ）</p><p><img src="'+o+`" alt="stack-func-call-full"></p><p>至此，我们能直观的看到并理解，执行到 <code>add</code> 函数的时候会存在两个执行上下文，而管理这些执行上下文的就是<strong>调用栈</strong></p><h2 id="js-调用栈" tabindex="-1">js 调用栈 <a class="header-anchor" href="#js-调用栈" aria-label="Permalink to &quot;js 调用栈&quot;">​</a></h2><p><strong>栈</strong> 是一种 <strong>先进后出</strong> 的一种数据结构， <strong>调用栈</strong> 也是如此。</p><p>根据以下代码理解 <code>js</code> 调用栈</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> c</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">c</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> d </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">10</span></span>
<span class="line"><span style="color:#E1E4E8;">  result </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">add</span><span style="color:#E1E4E8;">(b, c)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> result </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> d</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">addAll</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">6</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(</span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> c</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#E36209;">b</span><span style="color:#24292E;">, </span><span style="color:#E36209;">c</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">var</span><span style="color:#24292E;"> d </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">10</span></span>
<span class="line"><span style="color:#24292E;">  result </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">add</span><span style="color:#24292E;">(b, c)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> result </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> d</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">addAll</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">6</span><span style="color:#24292E;">)</span></span></code></pre></div><ul><li>创建全局上下文，压入栈底，变量环境对象中保存的信息如图所示 <img src="`+e+'" alt="stack-call-stack-1"></li><li>执行全局代码，赋值 <code>a = 2</code><img src="'+c+'" alt="stack-call-stack-2"></li><li>调用 <code>addAll</code> 函数，但会先进行编译，生成 <code>addAll</code> 函数的执行上下文，并压入调用栈 <img src="'+t+'" alt="stack-call-stack-3"></li><li>执行 <code>addAll</code> 函数代码，赋值 <code>d = 10</code> ，执行到 <code>add</code> 函数，同样要编译，为 <code>add</code> 函数创建执行上下文，并压入栈中 <img src="'+r+'" alt="stack-call-stack-4"></li><li>执行 <code>add</code> 函数完毕后，会将 <code>add</code> 函数的执行上下文从栈顶中弹出，并将结果赋值给 <code>result = 9</code><img src="'+E+'" alt="stack-call-stack-5"></li><li>继续执行 <code>addAll</code> 函数代码， <code>return</code> 后同样需要将 <code>addAll</code> 的执行上下文出栈，此时只剩下全局执行上下文 <img src="'+y+'" alt="stack-call-stack-6"></li></ul><p>至此，整个 <code>js</code> 执行流程结束</p><p><strong>调用栈</strong> 是 <code>JavaScript</code> 引擎追踪函数执行的一个机制，当一次有多个函数被调用时，通过调用栈就能够追踪到哪个函数正在被执行以及各函数之间的调用关系。</p><h2 id="开发时查看调用栈" tabindex="-1">开发时查看调用栈 <a class="header-anchor" href="#开发时查看调用栈" aria-label="Permalink to &quot;开发时查看调用栈&quot;">​</a></h2><ul><li>浏览器查看调用栈 - 添加 <code>debugger</code> 断点后查看 -&gt; <code>Call Stack</code> ， 最底下的 <code>(anonymous)</code> 是全局函数入口 <img src="'+i+'" alt="stack-call-stack-7"></li><li><code>console.trace()</code><img src="'+d+`" alt="stack-call-stack-8"></li></ul><h2 id="栈溢出-stack-overflow" tabindex="-1">栈溢出 Stack Overflow <a class="header-anchor" href="#栈溢出-stack-overflow" aria-label="Permalink to &quot;栈溢出 Stack Overflow&quot;">​</a></h2><p><strong>调用栈 是有大小的</strong> ， 超过一定数量 <code>js</code> 引擎 就会报 <strong>栈溢出</strong> 错误（ <code>Maximum call stack size exceeded</code> ）。特别是在写递归代码的时候。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Maximum call stack size exceeded</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">division</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">a</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">b</span><span style="color:#E1E4E8;">){</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">division</span><span style="color:#E1E4E8;">(a,b)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">division</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">))</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Maximum call stack size exceeded</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">division</span><span style="color:#24292E;">(</span><span style="color:#E36209;">a</span><span style="color:#24292E;">,</span><span style="color:#E36209;">b</span><span style="color:#24292E;">){</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">division</span><span style="color:#24292E;">(a,b)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">division</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">))</span></span></code></pre></div><p>所以必须采取一些方法来避免栈溢出错误，比如</p><ul><li>收紧递归终止条件，防止递归次数过多</li><li>尾递归优化，文章可见<a href="./tail-call">尾调用、尾递归 优化</a></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>每调用一个函数，<code>JavaScript</code> 引擎会为其创建执行上下文，并把该执行上下文压入调用栈，然后 <code>JavaScript</code> 引擎开始执行函数代码。</li><li>如果在一个函数 <code>A</code> 中调用了另外一个函数 <code>B</code> ，那么 <code>JavaScript</code> 引擎会为 <code>B</code> 函数创建执行上下文，并将 <code>B</code> 函数的执行上下文压入栈顶。</li><li>当前函数执行完毕后，<code>JavaScript</code> 引擎会将该函数的执行上下文弹出栈。</li><li>当分配的调用栈空间被占满时，会引发 <strong>堆栈溢出</strong> 问题。</li><li>栈是一种非常重要的数据结构，不光应用在 <code>JavaScript</code> 语言中，其他的编程语言，如 <code>C/C++</code> 、 <code>Java</code> 、 <code>Python</code> 等语言，在执行过程中也都使用了栈来管理函数之间的调用关系。所以栈是非常基础且重要的知识点，必须得掌握。</li></ul><h2 id="finally" tabindex="-1">Finally <a class="header-anchor" href="#finally" aria-label="Permalink to &quot;Finally&quot;">​</a></h2><p>有如下递归函数，会递归 <code>n</code> 次，当输入一个较大的数时，就会栈溢出，请进行优化</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runStack</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runStack</span><span style="color:#E1E4E8;">(n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">runStack</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50000</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runStack</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runStack</span><span style="color:#24292E;">(n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">runStack</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50000</span><span style="color:#24292E;">)</span></span></code></pre></div><p>可修改成循环</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 优化</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">runStack</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">n</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">while</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">100</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (n </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">) { </span><span style="color:#6A737D;">// 防止陷入死循环</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    n </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> n </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">runStack</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">50000</span><span style="color:#E1E4E8;">));</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 优化</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">runStack</span><span style="color:#24292E;">(</span><span style="color:#E36209;">n</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">while</span><span style="color:#24292E;"> (</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">100</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (n </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">) { </span><span style="color:#6A737D;">// 防止陷入死循环</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    n </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> n </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">runStack</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">50000</span><span style="color:#24292E;">));</span></span></code></pre></div>`,33),k=[u];function h(g,C,A,b,v,f){return a(),n("div",null,k)}const _=s(F,[["render",h]]);export{B as __pageData,_ as default};
