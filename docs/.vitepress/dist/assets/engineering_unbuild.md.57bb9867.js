import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.25bfaa42.js";const F=JSON.parse('{"title":"Unbuild","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/unbuild.md","filePath":"engineering/unbuild.md"}'),p={name:"engineering/unbuild.md"},o=l(`<h1 id="unbuild" tabindex="-1">Unbuild <a class="header-anchor" href="#unbuild" aria-label="Permalink to &quot;Unbuild&quot;">​</a></h1><p><a href="https://gitee.com/lafen/unbuild-demo" target="_blank" rel="noreferrer">unbuild demo</a></p><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><p>Install package:</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;"># pnpm</span></span>
<span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;"># pnpm</span></span>
<span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span></span></code></pre></div><p>Import:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// ESM</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { TEMPLATE_ENUM } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./constant&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// CommonJS</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">TEMPLATE_ENUM</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">require</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./constant&quot;</span><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// ESM</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { TEMPLATE_ENUM } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./constant&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// CommonJS</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> { </span><span style="color:#005CC5;">TEMPLATE_ENUM</span><span style="color:#24292E;"> } </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">require</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./constant&quot;</span><span style="color:#24292E;">);</span></span></code></pre></div><h2 id="unbuild-简介" tabindex="-1">unbuild 简介 <a class="header-anchor" href="#unbuild-简介" aria-label="Permalink to &quot;unbuild 简介&quot;">​</a></h2><p>无官网，只有 <code>github</code> 上一点介绍，配置也只有一个 类型声明 文件，需要查源码。</p><p><code>unbuild</code> 是一个 <code>js</code> 打包工具，相比于 <code>rollup</code> 有更好的开发体验，如 即时编译 <code>jit</code> 。</p><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">pnpm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">i</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unbuild</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">pnpm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">i</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unbuild</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><h2 id="使用" tabindex="-1">使用 <a class="header-anchor" href="#使用" aria-label="Permalink to &quot;使用&quot;">​</a></h2><p>新建 <code>index.ts</code> 、 <code>constant.ts</code> ， 分别写入</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// index.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { TEMPLATE_ENUM } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./constant&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">888</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">TEMPLATE_ENUM</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#B392F0;">test</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// index.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { TEMPLATE_ENUM } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./constant&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">test</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">888</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">TEMPLATE_ENUM</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#6F42C1;">test</span><span style="color:#24292E;">()</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// constant.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">enum</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TEMPLATE_ENUM</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">WEB</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;WEB&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">H5</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;H5&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// constant.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">enum</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TEMPLATE_ENUM</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">WEB</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;WEB&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">H5</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;H5&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="更新-package-json" tabindex="-1">更新 package.json <a class="header-anchor" href="#更新-package-json" aria-label="Permalink to &quot;更新 package.json&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;type&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;module&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;exports&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;.&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;import&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist/index.mjs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">&quot;require&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist/index.cjs&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;main&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist/index.cjs&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;types&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist/index.d.ts&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;files&quot;</span><span style="color:#E1E4E8;">: [</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;dist&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  ]</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;type&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;module&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;exports&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;.&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;import&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist/index.mjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">&quot;require&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist/index.cjs&quot;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;main&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist/index.cjs&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;types&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist/index.d.ts&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;files&quot;</span><span style="color:#24292E;">: [</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;dist&quot;</span></span>
<span class="line"><span style="color:#24292E;">  ]</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="build" tabindex="-1">build <a class="header-anchor" href="#build" aria-label="Permalink to &quot;build&quot;">​</a></h3><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unbuild</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unbuild</span></span></code></pre></div><p>这样就打包完成了。 <code>dist</code> 目录下会默认生成 <code>index.cjs</code> 和 <code>index.mjs</code> 文件，以及类型声明文件 <code>index.d.ts</code></p><h3 id="stub" tabindex="-1">stub <a class="header-anchor" href="#stub" aria-label="Permalink to &quot;stub&quot;">​</a></h3><p>值得注意的是，开发时可以使用 <code>jiti</code> 的插桩，此时运行</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">unbuild</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--stub</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">unbuild</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--stub</span></span></code></pre></div><p>这时 <code>dist</code> 目录下生成的是带 <code>jiti</code> 的 <code>bundle</code> ，可以尝试 <code>node</code> 直接执行 这个 <code>bundle</code> 查看输出，然后更改 <code>src</code> 源代码，再次使用 <code>node</code> 直接执行这个 <code>bundle</code> ，你会发现输出的代码是更改过后的。</p><p>也就是说我们只需执行一次插桩命令，无需监听源文件的修改就能做到实时更新打包内容，这极大的节省了监听编译源代码所消耗的时间。</p><h3 id="build-config-ts" tabindex="-1">build.config.ts <a class="header-anchor" href="#build-config-ts" aria-label="Permalink to &quot;build.config.ts&quot;">​</a></h3><p>也支持配置文件，新建 <code>build.config.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineBuildConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;unbuild&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// unbuild 配置</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineBuildConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 类型声明</span></span>
<span class="line"><span style="color:#E1E4E8;">  declaration: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 入口</span></span>
<span class="line"><span style="color:#E1E4E8;">  entries: [</span><span style="color:#9ECBFF;">&#39;./src/index&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 默认是输出的cjs和mjs文件的，但是声明了配置文件，则需要设置 emitCJS 为 true 显式输出 cjs，否则不会输出 cjs</span></span>
<span class="line"><span style="color:#E1E4E8;">  rollup: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    emitCJS: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    inlineDependencies: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    esbuild: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      target: </span><span style="color:#9ECBFF;">&#39;ES2020&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#6A737D;">// 压缩</span></span>
<span class="line"><span style="color:#E1E4E8;">      minify: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineBuildConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;unbuild&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// unbuild 配置</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineBuildConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 类型声明</span></span>
<span class="line"><span style="color:#24292E;">  declaration: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 入口</span></span>
<span class="line"><span style="color:#24292E;">  entries: [</span><span style="color:#032F62;">&#39;./src/index&#39;</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 默认是输出的cjs和mjs文件的，但是声明了配置文件，则需要设置 emitCJS 为 true 显式输出 cjs，否则不会输出 cjs</span></span>
<span class="line"><span style="color:#24292E;">  rollup: {</span></span>
<span class="line"><span style="color:#24292E;">    emitCJS: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    inlineDependencies: </span><span style="color:#005CC5;">true</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    esbuild: {</span></span>
<span class="line"><span style="color:#24292E;">      target: </span><span style="color:#032F62;">&#39;ES2020&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#6A737D;">// 压缩</span></span>
<span class="line"><span style="color:#24292E;">      minify: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>注意 配置文件 需要 在 <code>rollup</code> 下显式声明 <code>emitCJS</code> 才会导出 <code>cjs</code> 类型文件， <code>declaration</code> 也需要设置为 <code>true</code> 以输出类型声明文件</p><h2 id="功能" tabindex="-1">功能 <a class="header-anchor" href="#功能" aria-label="Permalink to &quot;功能&quot;">​</a></h2><ul><li>📦 Optimized bundler <ul><li>unbuild 基于 rollup ，集成了 rollup 中的插件，开箱即用的支持 ts ，并允许生成 cjs 和 es 格式和类型声明（如果需要生成 iife 类型代码，可以通过 hooks 自己生成）。</li><li>使用 esbuild 来转换 js 代码，比原生 rollup 更快</li></ul></li><li>🪄 Automated config <ul><li>从 package.json 文件中自动推断 打包配置 和 入口文件</li></ul></li><li>📁 Bundleless build <ul><li>集成 mkdist ，一个轻量的文件转换器，有点像 webpack 的 loader ，用于文件预处理，而且保持原有的目录文件结构</li></ul></li><li>✨ Passive watcher <ul><li>stub 插桩，使用 jiti 进行插桩。</li><li>以往开发过程都需要监听文件改动，以实时打包，每更新一次都得重新打包一次，这在 monorepo 开发过程中，触发多个包一起打包就会较耗时，也不太合理。</li><li>在 unbuild 中，可以使用插桩 <code>npx unbuild --stub</code></li><li>此时并没有对文件进行监听，只是生成了 带 jiti 的 bundle ， 这时已经可以直接使用打包完的代码了，因为 jiti 可以动态的执行 js 或 ts 源码，在开发 monorepo 时还需执行一次 stub 即可，非常好用。</li></ul></li><li>✍ Untype Generator <ul><li>集成 untyped ， 可以通过 markdown 和 配置对象生成类型。</li></ul></li><li>✔️ Secure builds <ul><li>自动检查各种打包问题，例如潜在的丢失和未使用的依赖等。</li></ul></li></ul><h2 id="源码" tabindex="-1">源码 <a class="header-anchor" href="#源码" aria-label="Permalink to &quot;源码&quot;">​</a></h2><p>大致看一下源码</p><h3 id="package-json" tabindex="-1">package.json <a class="header-anchor" href="#package-json" aria-label="Permalink to &quot;package.json&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;bin&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;unbuild&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;./dist/cli.mjs&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;bin&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;unbuild&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;./dist/cli.mjs&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>由 <code>bin</code> 字段可知，运行 <code>npx unbuild</code> 的时候，其实是 <code>node</code> 在运行 <code>dist</code> 目录下的 <code>cli.mjs</code> 文件，对应 <code>src</code> 下即 <code>cli.ts</code> 。</p><h3 id="cli-ts" tabindex="-1">cli.ts <a class="header-anchor" href="#cli-ts" aria-label="Permalink to &quot;cli.ts&quot;">​</a></h3><p>看下 <code>src/cli.ts</code> 代码</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { resolve } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;pathe&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> mri </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mri&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { build } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./build&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">args</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mri</span><span style="color:#E1E4E8;">(process.argv.</span><span style="color:#B392F0;">splice</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">rootDir</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolve</span><span style="color:#E1E4E8;">(process.</span><span style="color:#B392F0;">cwd</span><span style="color:#E1E4E8;">(), args._[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;.&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(rootDir, args.stub).</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`Error building \${</span><span style="color:#E1E4E8;">rootDir</span><span style="color:#9ECBFF;">}: \${</span><span style="color:#E1E4E8;">error</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">throw</span><span style="color:#E1E4E8;"> error;</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">main</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">catch</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">  process.</span><span style="color:#B392F0;">exit</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">#!/usr/bin/env node</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { resolve } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;pathe&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> mri </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mri&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { build } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./build&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">main</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">args</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mri</span><span style="color:#24292E;">(process.argv.</span><span style="color:#6F42C1;">splice</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">rootDir</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolve</span><span style="color:#24292E;">(process.</span><span style="color:#6F42C1;">cwd</span><span style="color:#24292E;">(), args._[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;.&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(rootDir, args.stub).</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`Error building \${</span><span style="color:#24292E;">rootDir</span><span style="color:#032F62;">}: \${</span><span style="color:#24292E;">error</span><span style="color:#032F62;">}\`</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">throw</span><span style="color:#24292E;"> error;</span></span>
<span class="line"><span style="color:#24292E;">  });</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">main</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">catch</span><span style="color:#24292E;">((</span><span style="color:#E36209;">error</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">error</span><span style="color:#24292E;">(error);</span></span>
<span class="line"><span style="color:#24292E;">  process.</span><span style="color:#6F42C1;">exit</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><p>非常简洁，定义 <code>main</code> 函数，然后执行，里面主要调用了 <code>src/build.ts</code> 导出的 <code>build</code> 构建函数。 <code>build</code> 的时候传入 打包根目录 和 命令行 <code>stub</code> 参数，根目录默认 &#39;.&#39; ， 即当前目录。此外 <code>mri</code> 是一个轻量的命令行参数解析器（相比于 <code>minimist</code> 来说）。</p><h3 id="build-ts" tabindex="-1">build.ts <a class="header-anchor" href="#build-ts" aria-label="Permalink to &quot;build.ts&quot;">​</a></h3><p>看下 <code>build.ts</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Read build.config and package.json</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">buildConfig</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryRequire</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./build.config&quot;</span><span style="color:#E1E4E8;">, rootDir) </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> {};</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">pkg</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">tryRequire</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;./package.json&quot;</span><span style="color:#E1E4E8;">, rootDir);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Resolve preset</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">preset</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">resolvePreset</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  buildConfig.preset </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    pkg.unbuild?.preset </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    pkg.build?.preset </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    inputConfig.preset </span><span style="color:#F97583;">||</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&quot;auto&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootDir</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Read build.config and package.json</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">buildConfig</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryRequire</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./build.config&quot;</span><span style="color:#24292E;">, rootDir) </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> {};</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">pkg</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">tryRequire</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;./package.json&quot;</span><span style="color:#24292E;">, rootDir);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Resolve preset</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">preset</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">resolvePreset</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  buildConfig.preset </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    pkg.unbuild?.preset </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    pkg.build?.preset </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    inputConfig.preset </span><span style="color:#D73A49;">||</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&quot;auto&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  rootDir</span></span>
<span class="line"><span style="color:#24292E;">);</span></span></code></pre></div><blockquote><p>源码是 ts ，此处做了适当删减 ts 类型声明</p></blockquote><p>首先通过 <code>tryRequire</code> 函数尝试读取根目录下的 <code>build.config[.js, .ts]</code> 文件 和 <code>package.json</code> 文件，然后 通过 <code>resolvePreset</code> 获取 预配置 <code>preset</code> ， <code>preset</code> 是字符串的话则当做文件，通过 <code>tryRequire</code> 去读取，是函数则执行函数拿到返回值。</p><ul><li><code>tryRequire()</code><ul><li>内部使用 <code>jiti</code> 进行读取文件内容</li></ul></li><li><code>resolvePreset()</code><ul><li>优先获取 <code>build.config</code> 文件下的 <code>preset</code> 字段</li><li>取不到则依次降级为 <code>package.json</code> 里的 <code>unbuild.preset</code> 或者 <code>build.preset</code></li><li><code>inputConfig</code> 这里并没有传入，这里猜测为 命令行参数</li><li><code>&#39;auto&#39;</code> 就比较有意思，直接赋值了 <code>autoPreset</code> ， <code>autoPreset</code> 由 <code>auto.ts</code> 中导出，具体看下<div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">autoPreset</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">definePreset</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    hooks: {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#9ECBFF;">&quot;build:prepare&quot;</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">ctx</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// Disable auto if entries already provided of pkg not available</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">ctx.pkg </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> ctx.options.entries.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">sourceFiles</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">listRecursively</span><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(ctx.options.rootDir, </span><span style="color:#9ECBFF;">&quot;src&quot;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">inferEntries</span><span style="color:#E1E4E8;">(ctx.pkg, sourceFiles);</span></span>
<span class="line"><span style="color:#E1E4E8;">      },</span></span>
<span class="line"><span style="color:#E1E4E8;">    },</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">autoPreset</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">definePreset</span><span style="color:#24292E;">(() </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    hooks: {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#032F62;">&quot;build:prepare&quot;</span><span style="color:#24292E;">(</span><span style="color:#E36209;">ctx</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// Disable auto if entries already provided of pkg not available</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#24292E;">ctx.pkg </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> ctx.options.entries.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">sourceFiles</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">listRecursively</span><span style="color:#24292E;">(</span><span style="color:#6F42C1;">join</span><span style="color:#24292E;">(ctx.options.rootDir, </span><span style="color:#032F62;">&quot;src&quot;</span><span style="color:#24292E;">));</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">inferEntries</span><span style="color:#24292E;">(ctx.pkg, sourceFiles);</span></span>
<span class="line"><span style="color:#24292E;">      },</span></span>
<span class="line"><span style="color:#24292E;">    },</span></span>
<span class="line"><span style="color:#24292E;">  };</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><ul><li>就是 定义了 <code>&#39;build:prepare&#39;</code> 的 <code>hooks</code> ，在打包前处理完配置项</li><li>注意这里的 <code>return</code> ， 当读取不到 <code>package.json</code> 文件或者 <code>entries</code> 入口存在情况下，直接返回，否则就根据 <code>src</code> 目录去推断具体的 入口文件</li><li><code>listRecursively()</code><ul><li>递归 <code>src</code> 目录下的所有文件，返回一个各个文件的路径的数组</li></ul></li><li><code>inferEntries()</code><ul><li>接着会处理这个文件路径的数组，先从短到长排序</li><li>从 <code>package.json</code> 中的 <code>exports</code> 中提取导出的文件名，存放到 <code>outputs</code></li><li>接着会处理 <code>package.json</code> 中的 <code>bin</code> 、 <code>main</code> 、 <code>module</code> 、 <code>types</code> ，一样存放到 <code>outputs</code></li><li>遍历 <code>outputs</code> ，过滤掉文件夹，留下文件，逐一使用正则匹配每个 <code>output</code> 可能的 <code>input</code> 入口</li></ul></li></ul></li></ul></li></ul><p>接着看回 <code>build.ts</code> ， 拿到 <code>buildConfig</code> 和 <code>pkg</code> 和 <code>preset</code> 之后，通过 <code>defu</code> 库将他们与默认参数合并， <code>defu</code> 是一个深度合并参数的 <code>node</code> 包， <code>defu</code> 传入多个合并对象会以 <strong>左边</strong> 参数为准</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 合并优先级逐渐降低</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">options</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defu</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#E1E4E8;">  buildConfig,</span></span>
<span class="line"><span style="color:#E1E4E8;">  pkg.unbuild </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> pkg.build,</span></span>
<span class="line"><span style="color:#E1E4E8;">  inputConfig,</span></span>
<span class="line"><span style="color:#E1E4E8;">  preset,</span></span>
<span class="line"><span style="color:#E1E4E8;">  { </span><span style="color:#F97583;">...</span><span style="color:#E1E4E8;">defaultBuildOptions }</span></span>
<span class="line"><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuildOptions</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 合并优先级逐渐降低</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">options</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defu</span><span style="color:#24292E;">(</span></span>
<span class="line"><span style="color:#24292E;">  buildConfig,</span></span>
<span class="line"><span style="color:#24292E;">  pkg.unbuild </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> pkg.build,</span></span>
<span class="line"><span style="color:#24292E;">  inputConfig,</span></span>
<span class="line"><span style="color:#24292E;">  preset,</span></span>
<span class="line"><span style="color:#24292E;">  { </span><span style="color:#D73A49;">...</span><span style="color:#24292E;">defaultBuildOptions }</span></span>
<span class="line"><span style="color:#24292E;">) </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuildOptions</span></span></code></pre></div><p>组装构建时上下文参数 <code>ctx</code> ，这在生成 <code>type</code> 类型声明 、 复制文件到输出目录、 <code>rollup</code> 打包时都用到</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">ctx</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">BuildContext</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  options,</span></span>
<span class="line"><span style="color:#E1E4E8;">  warnings: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  pkg,</span></span>
<span class="line"><span style="color:#E1E4E8;">  buildEntries: [],</span></span>
<span class="line"><span style="color:#E1E4E8;">  usedImports: </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Set</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">  hooks: </span><span style="color:#B392F0;">createHooks</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">ctx</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">BuildContext</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  options,</span></span>
<span class="line"><span style="color:#24292E;">  warnings: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  pkg,</span></span>
<span class="line"><span style="color:#24292E;">  buildEntries: [],</span></span>
<span class="line"><span style="color:#24292E;">  usedImports: </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Set</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">  hooks: </span><span style="color:#6F42C1;">createHooks</span><span style="color:#24292E;">(),</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><p>注册 <code>hooks</code> 到 <code>ctx.hooks</code> 上， 包括 <code>preset.hooks</code> 、 <code>inputConfig.hooks</code> 、 <code>buildConfig.hooks</code> ，并调用 <code>&#39;build:prepare&#39;</code> 这个 <code>hooks</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Allow prepare and extending context</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ctx.hooks.</span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;build:prepare&quot;</span><span style="color:#E1E4E8;">, ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Allow prepare and extending context</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ctx.hooks.</span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;build:prepare&quot;</span><span style="color:#24292E;">, ctx);</span></span></code></pre></div><p>接着遍历 <code>opitons.entries</code> ， <code>builder</code> 字段不存在在自动判断使用 <code>mkdist</code> 还是 <code>rollup</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">entry.builder </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> entry.input.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;/&quot;</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">?</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;mkdist&quot;</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;rollup&quot;</span><span style="color:#E1E4E8;">;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">entry.builder </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> entry.input.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;/&quot;</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">?</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;mkdist&quot;</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;rollup&quot;</span><span style="color:#24292E;">;</span></span></code></pre></div><p>然后依次调用打包</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// untyped</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">typesBuild</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// mkdist</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mkdistBuild</span><span style="color:#E1E4E8;">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// rollup</span></span>
<span class="line"><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">rollupBuild</span><span style="color:#E1E4E8;">(ctx);</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// untyped</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">typesBuild</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// mkdist</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mkdistBuild</span><span style="color:#24292E;">(ctx);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// rollup</span></span>
<span class="line"><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">rollupBuild</span><span style="color:#24292E;">(ctx);</span></span></code></pre></div><p>如果是 <code>stub</code> ，则 <code>return</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Skip rest for stub</span></span>
<span class="line"><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (options.stub) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> ctx.hooks.</span><span style="color:#B392F0;">callHook</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;build:done&quot;</span><span style="color:#E1E4E8;">, ctx);</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Skip rest for stub</span></span>
<span class="line"><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (options.stub) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> ctx.hooks.</span><span style="color:#6F42C1;">callHook</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;build:done&quot;</span><span style="color:#24292E;">, ctx);</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h2 id="sources" tabindex="-1">Sources <a class="header-anchor" href="#sources" aria-label="Permalink to &quot;Sources&quot;">​</a></h2><p><a href="https://github.com/unjs/unbuild" target="_blank" rel="noreferrer">Github</a></p>`,61),e=[o];function c(t,r,E,i,y,d){return n(),a("div",null,e)}const h=s(p,[["render",c]]);export{F as __pageData,h as default};
