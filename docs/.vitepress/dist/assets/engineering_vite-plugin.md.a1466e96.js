import{_ as s,o as n,c as a,Q as l}from"./chunks/framework.281e52d7.js";const g=JSON.parse('{"title":"Vite 插件","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/vite-plugin.md","filePath":"engineering/vite-plugin.md","lastUpdated":1703046107000}'),o={name:"engineering/vite-plugin.md"},e=l(`<h1 id="vite-插件" tabindex="-1">Vite 插件 <a class="header-anchor" href="#vite-插件" aria-label="Permalink to &quot;Vite 插件&quot;">​</a></h1><h2 id="基础概念" tabindex="-1">基础概念 <a class="header-anchor" href="#基础概念" aria-label="Permalink to &quot;基础概念&quot;">​</a></h2><h3 id="vite-钩子" tabindex="-1">vite 钩子 <a class="header-anchor" href="#vite-钩子" aria-label="Permalink to &quot;vite 钩子&quot;">​</a></h3><p><code>vite</code> 和 <code>webpack</code> 一样从开始构建到结束提供了很多生命周期钩子，以供功能定制开发。</p><p><code>vite</code> 基于 <code>rollup</code> 封装的，所以 <code>vite</code> 中一部分钩子其实就是 <code>rollup</code> 中的钩子：</p><ul><li>通用钩子（沿用 <code>rollup</code> 的钩子）</li><li>独有的钩子</li></ul><h4 id="通用钩子-7-个" tabindex="-1">通用钩子 7 个 <a class="header-anchor" href="#通用钩子-7-个" aria-label="Permalink to &quot;通用钩子 7 个&quot;">​</a></h4><ul><li><code>options</code> - 构建阶段第一个钩子，可在其中获取插件中暴露的参数<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">myPlugin</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">	name: </span><span style="color:#9ECBFF;">&#39;pluginDemo&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">myPlugin</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">	name: </span><span style="color:#032F62;">&#39;pluginDemo&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div></li><li><code>buildStart</code> - 读取入口文件后开始构建 <ul><li>自定义任务：构建前开始执行自定义任务，例如清理临时文件、生成一些构建配置、执行前置操作等</li><li>日志记录：记录项目信息等，以便后续分析和调试</li><li>状态检查：构建前的状态检查，出错可提前终止并给出错误提示</li><li>设置环境变量：根据不同环境配置不同的构建选项</li></ul></li><li><code>resolveId</code> - 主要用于自定义模块解析的行为</li><li><code>load</code> - 模块加载时调用，可用于自定义模块加载逻辑</li><li><code>transform</code> - 模块代码构建期间调用，用于修改模块源代码，可以在构建期间对模块进行转换和处理，例如添加额外的代码、转换特定格式文件等</li><li><code>buildEnd</code> - 可用于构建结束后生成报告、自动化部署、通知团队构建完成等</li><li><code>closeBundle</code> - 打包生成 <code>bundle</code> 文件时调用，可进行上传 <code>bundle</code> 文件到 <code>cdn</code> 、生成版本号、代码压缩、加密等</li></ul><h4 id="独有钩子-6-个" tabindex="-1">独有钩子 6 个 <a class="header-anchor" href="#独有钩子-6-个" aria-label="Permalink to &quot;独有钩子 6 个&quot;">​</a></h4><ul><li><code>config</code> - 可在配置对象创建之前对其进行修改和扩展，例如修改构建输出目录、设置自定义别名等</li><li><code>configResolved</code> - 用于在 <code>vite</code> 配置对象被解析和应用后执行自定义操作，允许检查和修改已解析的 <code>vite</code> 配置</li><li><code>configureServer</code> - 用于配置开发服务器，在 <code>vite</code> 开发服务器启动之前执行，允许自定义开发服务器的行为，例如添加中间件到开发服务器中，以处理请求、响应、添加验证等</li><li><code>configurePreviewServer</code> - 与 <code>configureServer</code> 相同，但用于预览服务器</li><li><code>transformIndexHtml</code> - 在生成最终的 <code>index.html</code> 文件之前执行，允许修改 <code>html</code> 内容、添加脚本、标签等</li><li><code>handleHotUpdate</code> - 用于模块发生热更新时执行自定义逻辑</li></ul><h2 id="vite-插件开发" tabindex="-1">vite 插件开发 <a class="header-anchor" href="#vite-插件开发" aria-label="Permalink to &quot;vite 插件开发&quot;">​</a></h2><h3 id="基本要求" tabindex="-1">基本要求 <a class="header-anchor" href="#基本要求" aria-label="Permalink to &quot;基本要求&quot;">​</a></h3><ul><li><code>vite</code> 插件导出是一个函数，可带入参，在使用插件时传入即可</li><li>函数要 <code>return</code> 一个对象</li><li><code>return</code> 的对象要有 <code>name</code> 属性</li><li>对象中使用合适的钩子即可</li></ul><h3 id="插件-demo" tabindex="-1">插件 Demo <a class="header-anchor" href="#插件-demo" aria-label="Permalink to &quot;插件 Demo&quot;">​</a></h3><p>简单利用 <code>vite</code> 来开发一个插件，用于在浏览器中打印一段文字，类似于某些网站的控制台打印的功能。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// plugins &gt; logPlugin.js</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">logPlugin</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;logPlugin start&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 插件名</span></span>
<span class="line"><span style="color:#E1E4E8;">    name: </span><span style="color:#9ECBFF;">&#39;log-plugin&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 直接给 main.js 文件添加一段代码，或者直接在 transformIndexHtml 钩子中添加脚本也可</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">transform</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">code</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">id</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (id.</span><span style="color:#B392F0;">endsWith</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;main.js&#39;</span><span style="color:#E1E4E8;">)) {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">\`\${</span><span style="color:#E1E4E8;">code</span><span style="color:#9ECBFF;">}</span><span style="color:#79B8FF;">\\n</span><span style="color:#9ECBFF;">if (typeof window !== &#39;undefined&#39;) {</span></span>
<span class="line"><span style="color:#9ECBFF;">					const txt = &#39;这是一个 vite 插件 demo&#39;;</span></span>
<span class="line"><span style="color:#9ECBFF;">					console.log(txt);</span></span>
<span class="line"><span style="color:#9ECBFF;">				}\`</span></span>
<span class="line"><span style="color:#E1E4E8;">      }</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> code</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// plugins &gt; logPlugin.js</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">logPlugin</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;logPlugin start&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 插件名</span></span>
<span class="line"><span style="color:#24292E;">    name: </span><span style="color:#032F62;">&#39;log-plugin&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 直接给 main.js 文件添加一段代码，或者直接在 transformIndexHtml 钩子中添加脚本也可</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">transform</span><span style="color:#24292E;">(</span><span style="color:#E36209;">code</span><span style="color:#24292E;">, </span><span style="color:#E36209;">id</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (id.</span><span style="color:#6F42C1;">endsWith</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;main.js&#39;</span><span style="color:#24292E;">)) {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#032F62;">\`\${</span><span style="color:#24292E;">code</span><span style="color:#032F62;">}</span><span style="color:#005CC5;">\\n</span><span style="color:#032F62;">if (typeof window !== &#39;undefined&#39;) {</span></span>
<span class="line"><span style="color:#032F62;">					const txt = &#39;这是一个 vite 插件 demo&#39;;</span></span>
<span class="line"><span style="color:#032F62;">					console.log(txt);</span></span>
<span class="line"><span style="color:#032F62;">				}\`</span></span>
<span class="line"><span style="color:#24292E;">      }</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> code</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>在 <code>vite.config.js</code> 中调用插件</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { defineConfig } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> vue </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { logPlugin } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;@/plugins/logPlugins&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">default</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">defineConfig</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  plugins: [</span><span style="color:#B392F0;">vue</span><span style="color:#E1E4E8;">(), </span><span style="color:#B392F0;">logPlugin</span><span style="color:#E1E4E8;">()], </span><span style="color:#6A737D;">// 使用插件</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { defineConfig } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;vite&#39;</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> vue </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@vitejs/plugin-vue&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { logPlugin } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;@/plugins/logPlugins&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">default</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">defineConfig</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  plugins: [</span><span style="color:#6F42C1;">vue</span><span style="color:#24292E;">(), </span><span style="color:#6F42C1;">logPlugin</span><span style="color:#24292E;">()], </span><span style="color:#6A737D;">// 使用插件</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>到此即可在项目打包完毕后，将代码插入到项目中，打开浏览器控制台即可看到输出的内容。</p><h2 id="finally" tabindex="-1">Finally <a class="header-anchor" href="#finally" aria-label="Permalink to &quot;Finally&quot;">​</a></h2><p><code>vite</code> 插件开发就是需要熟悉 <code>vite</code> 钩子的功能和边界，使用合适的钩子完成想要的功能，知道 <code>vite</code> 有哪些钩子可以使用能够让我们在需要的时候快速实现功能。</p><h2 id="source" tabindex="-1">Source <a class="header-anchor" href="#source" aria-label="Permalink to &quot;Source&quot;">​</a></h2><ul><li><p><a href="https://cn.vitejs.dev/guide/api-plugin.html#authoring-a-plugin" target="_blank" rel="noreferrer">Vite</a></p></li><li><p><a href="https://juejin.cn/post/7276260308515389480#heading-3" target="_blank" rel="noreferrer">Vite 插件开发</a></p></li></ul>`,23),p=[e];function t(c,r,i,E,d,y){return n(),a("div",null,p)}const h=s(o,[["render",t]]);export{g as __pageData,h as default};
