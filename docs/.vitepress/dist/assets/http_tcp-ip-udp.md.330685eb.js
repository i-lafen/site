import{_ as o,o as e,c,Q as t}from"./chunks/framework.281e52d7.js";const d="/site/assets/ip.4dc5e70d.webp",s="/site/assets/udp.2f9fccb6.webp",r="/site/assets/http.43068318.webp",a="/site/assets/link.1a98cdaf.webp",m=JSON.parse('{"title":"TCP/IP/UDP","description":"","frontmatter":{},"headers":[],"relativePath":"http/tcp-ip-udp.md","filePath":"http/tcp-ip-udp.md","lastUpdated":1700799232000}'),i={name:"http/tcp-ip-udp.md"},p=t('<h1 id="tcp-ip-udp" tabindex="-1">TCP/IP/UDP <a class="header-anchor" href="#tcp-ip-udp" aria-label="Permalink to &quot;TCP/IP/UDP&quot;">​</a></h1><h2 id="ip" tabindex="-1">IP <a class="header-anchor" href="#ip" aria-label="Permalink to &quot;IP&quot;">​</a></h2><blockquote><p>IP：把数据包送达目的主机，网际协议（Internet Protocol，简称IP）</p></blockquote><p>数据传输需要使用 <code>IP</code> 协议，通过互联网的在线设备的 <code>IP</code> 地址进行设备间的数据传输，访问任何网站实际上只是你的计算机向另一台计算机请求信息。</p><p>如果想要把一个数据包从 <code>主机A</code> 发送给 <code>主机B</code> ，数据包中应当包含 <code>主机A</code> 和 <code>主机B</code> 的 <code>IP</code> 地址，这样才能做到正确寻址，这些信息会被装进一个叫 <code>IP头</code> 的数据结构里。<code>IP头</code> 是 <code>IP</code> 数据包开头的信息，包含 <code>IP 版本</code>、<code>源 IP 地址</code>、<code>目标 IP 地址</code>、<code>生存时间</code>等信息。</p><p><img src="'+d+'" alt="ip"></p><h2 id="udp" tabindex="-1">UDP <a class="header-anchor" href="#udp" aria-label="Permalink to &quot;UDP&quot;">​</a></h2><blockquote><p>UDP：把数据包送达应用程序，用户数据包协议（User Datagram Protocol）</p></blockquote><p><code>IP</code> 是非常底层的协议，只负责把数据包传送到对方电脑，但是对方电脑并不知道把数据包交给哪个程序，是交给浏览器还是交给王者荣耀？因此，需要基于 <code>IP</code> 之上开发能和应用打交道的协议，最常见的是“用户数据包协议（<code>User Datagram Protocol</code>）”，简称 <code>UDP</code> 。</p><p><code>UDP</code> 中一个最重要的信息是<strong>端口号</strong>，端口号其实就是一个数字，每个想访问网络的程序都需要绑定一个端口号。通过端口号 <code>UDP</code> 就能把指定的数据包发送给指定的程序了，所以<strong>IP通过 IP 地址信息把数据包发送给指定的电脑，而 UDP 通过 端口号 把数据包分发给正确的程序</strong>。和 <code>IP</code> 头一样，端口号会被装进 <code>UDP头</code> 里面， <code>UDP头</code> 再和原始数据包合并组成新的 <code>UDP数据包</code>。<code>UDP头</code> 中除了 目的端口，还有 源端口号 等信息</p><p><img src="'+s+'" alt="udp"></p><h2 id="tcp" tabindex="-1">TCP <a class="header-anchor" href="#tcp" aria-label="Permalink to &quot;TCP&quot;">​</a></h2><blockquote><p>TCP：（Transmission Control Protocol，传输控制协议）</p></blockquote><p>对于浏览器请求，或者邮件这类要求数据传输可靠性（<code>reliability</code>）的应用，如果使用 <code>UDP</code> 来传输会存在两个问题：</p><ul><li>数据包在传输过程中容易丢失；</li><li>大文件会被拆分成很多小的数据包来传输，这些小的数据包会经过不同的路由，并在不同的时间到达接收端，而 <code>UDP</code> 协议并不知道如何组装这些数据包，从而把这些数据包还原成完整的文件。</li></ul><p>基于这两个问题，我们引入 <code>TCP</code> 了。<code>TCP</code>（<code>Transmission Control Protocol</code>，传输控制协议）是一种<strong>面向连接的</strong>、<strong>可靠的</strong>、<strong>基于字节流</strong>的传输层通信协议。相对于 <code>UDP</code> ， <code>TCP</code> 有下面两个特点:</p><ul><li>对于数据包丢失的情况， <code>TCP</code> 提供<strong>重传机制</strong>；</li><li><code>TCP</code> 引入了<strong>数据包排序</strong>机制，用来保证把乱序的数据包组合成一个完整的文件。</li></ul><p>和 <code>UDP头</code> 一样， <code>TCP头</code> 除了包含了 目标端口 和 本机端口号 外，还提供了用于 排序 的 序列号，以便接收端通过 序号 来重排数据包。</p><p><img src="'+r+'" alt="http"></p><p>一个完整的 <code>TCP</code> 连接的生命周期包括 <strong>建立连接</strong> 、 <strong>传输数据</strong> 和 <strong>断开连接</strong> 三个阶段。</p><p><img src="'+a+'" alt="link"></p><ul><li><strong>首先，建立连接阶段</strong>。这个阶段是通过 <strong>三次握手</strong> 来建立客户端和服务器之间的连接。 · 提供面向连接的通信传输。面向连接是指在数据通信开始之前先做好两端之间的准备工作。所谓 三次握手，是指在建立一个 <code>TCP</code> 连接时，客户端和服务器总共要发送 三个数据包 以确认连接的建立。</li><li><strong>其次，传输数据阶段</strong>。在该阶段，接收端需要对每个数据包进行确认操作，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的<strong>重发机制</strong>。同样，一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，接收端会按照 <code>TCP头</code> 中的序号为其 <strong>排序</strong> ，从而保证组成完整的数据。</li><li><strong>最后，断开连接阶段</strong>。数据传输完毕之后，就要终止连接了，涉及到最后一个阶段 <strong>四次挥手</strong> 来保证双方都能断开连接。</li></ul><p>到这里你应该就明白了， <code>TCP</code> 为了保证数据传输的可靠性，牺牲了数据包的传输速度，因为 <strong>三次握手</strong> 和 <strong>数据包校验机制</strong> 等把传输过程中的数据包的数量提高了一倍。</p><h2 id="tcp-ip-总结" tabindex="-1">TCP/IP 总结 <a class="header-anchor" href="#tcp-ip-总结" aria-label="Permalink to &quot;TCP/IP 总结&quot;">​</a></h2><ul><li>互联网中的数据是通过数据包来传输的，数据包在传输过程中容易丢失或出错。</li><li><code>IP</code> 负责把数据包送达目的主机。</li><li><code>UDP</code> 负责把数据包送达具体应用。</li><li>而 <code>TCP</code> 保证了数据完整地传输，它的连接可分为三个阶段：建立连接、传输数据 和 断开连接。</li><li>其实了解 <code>TCP</code> 协议，是为了全方位了解 <code>HTTP</code> ，包括其实际功能和局限性，之后才会更加深刻地理解为什么要推出 <code>HTTP/2</code> ，以及为什么要推出 <code>QUIC</code> 协议，也就是未来的 <code>HTTP/3</code> 。</li></ul>',25),n=[p];function l(P,g,u,h,_,T){return e(),c("div",null,n)}const C=o(i,[["render",l]]);export{m as __pageData,C as default};
