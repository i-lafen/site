import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.a638f038.js";const h=JSON.parse('{"title":"代码规范","description":"","frontmatter":{},"headers":[],"relativePath":"engineering/eslint.md","filePath":"engineering/eslint.md"}'),e={name:"engineering/eslint.md"},p=l(`<h1 id="代码规范" tabindex="-1">代码规范 <a class="header-anchor" href="#代码规范" aria-label="Permalink to &quot;代码规范&quot;">​</a></h1><h2 id="eslint-和-prettier" tabindex="-1">eslint 和 prettier <a class="header-anchor" href="#eslint-和-prettier" aria-label="Permalink to &quot;eslint 和 prettier&quot;">​</a></h2><ul><li><code>eslint</code> 常用于项目中代码检测</li><li><code>prettier</code> 常用于自动格式化代码</li></ul><h3 id="集成-eslint-和-prettier" tabindex="-1">集成 eslint 和 prettier <a class="header-anchor" href="#集成-eslint-和-prettier" aria-label="Permalink to &quot;集成 eslint 和 prettier&quot;">​</a></h3><p>安装 <code>eslint-config-standard</code>、<code>eslint-plugin-import</code>、<code>eslint-plugin-promise</code>、<code>eslint-plugin-node</code></p><div class="language-powershell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">powershell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">yarn add eslint</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">config</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">standard eslint</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">import eslint</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">promise eslint</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">plugin</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">node</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">yarn add eslint</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">config</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">standard eslint</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">import eslint</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">promise eslint</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">plugin</span><span style="color:#D73A49;">-</span><span style="color:#24292E;">node</span></span></code></pre></div><p>设置 <code>extends</code> 配置，也可以在 <code>rules</code> 里修改校验规则，可选值 <code>[&#39;error&#39;, &#39;warn&#39;, &#39;off&#39;]</code>，更多配置可以试试官网 <a href="https://eslint.org/play/" target="_blank" rel="noreferrer">eslint playground</a></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .eslintrc.js</span></span>
<span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  extends: </span><span style="color:#9ECBFF;">&#39;standard&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  rules: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#9ECBFF;">&#39;space-before-function-paren&#39;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&#39;off&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .eslintrc.js</span></span>
<span class="line"><span style="color:#005CC5;">module</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">exports</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  extends: </span><span style="color:#032F62;">&#39;standard&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  rules: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#032F62;">&#39;space-before-function-paren&#39;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&#39;off&#39;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p><code>vscode</code> 中安装 <code>Prettier - Code formatter</code> 插件，设置格式化规则，例如</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .prettierrc</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;semi&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">false</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#9ECBFF;">&quot;singleQuote&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#79B8FF;">true</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .prettierrc</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;semi&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">false</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#032F62;">&quot;singleQuote&quot;</span><span style="color:#24292E;">: </span><span style="color:#005CC5;">true</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><ul><li>在 <code>vscode</code> 的 <code>Settings</code> 中搜索并勾选 <code>Editor: Format On Save</code> 选项，开启保存时格式化</li><li><code>Settings</code> 中搜索 <code>Editor: Default Formatter</code> ，设置使用 <code>Prettier - Code Formatter</code> 插件来格式化代码</li></ul><h3 id="设置-scripts" tabindex="-1">设置 scripts <a class="header-anchor" href="#设置-scripts" aria-label="Permalink to &quot;设置 scripts&quot;">​</a></h3><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#79B8FF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;lint&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;eslint ./src --ext .js,.vue --ignore-path .eslintignore&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// package.json</span></span>
<span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#005CC5;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;lint&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;eslint ./src --ext .js,.vue --ignore-path .eslintignore&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>执行校验</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">run</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">lint</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">run</span><span style="color:#24292E;"> </span><span style="color:#032F62;">lint</span></span></code></pre></div><ul><li><code>./src</code> 指定校验目录</li><li><code>--ext</code> 校验指定后缀名的文件</li><li><code>--ignore-path</code> 跳过校验的路径，<code>.eslintignore</code> 是当前路径下的文件，可直接写入跳过校验的路径，例如</li></ul><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// .eslintignore</span></span>
<span class="line"><span style="color:#E1E4E8;">src/labs</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// .eslintignore</span></span>
<span class="line"><span style="color:#24292E;">src/labs</span></span></code></pre></div><h2 id="使用-husky-在-git-commit-前校验" tabindex="-1">使用 husky 在 git commit 前校验 <a class="header-anchor" href="#使用-husky-在-git-commit-前校验" aria-label="Permalink to &quot;使用 husky 在 git commit 前校验&quot;">​</a></h2><p>安装 <code>husky</code> 包</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">yarn</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">-D</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">yarn</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">-D</span></span></code></pre></div><p>执行以下命令会在根目录下生成 <code>.husky</code> 文件夹</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span></span></code></pre></div><p>然后继续执行，则会在 <code>pre-commit</code> 钩子之前会执行 <code>npm run lint</code> 的命令，此时 <code>.husky</code> 文件夹下会添加了一个 <code>pre-commit</code> 文件</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">add</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">husky/pre-commit</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;npm run lint&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npx</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky</span><span style="color:#24292E;"> </span><span style="color:#032F62;">add</span><span style="color:#24292E;"> </span><span style="color:#032F62;">husky/pre-commit</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;npm run lint&quot;</span></span></code></pre></div><p>则在 <code>git commit</code> 前就会执行校验命令，校验不通过则不会 <code>commit</code> 代码</p>`,25),o=[p];function t(c,r,i,d,y,E){return a(),n("div",null,o)}const g=s(e,[["render",t]]);export{h as __pageData,g as default};
