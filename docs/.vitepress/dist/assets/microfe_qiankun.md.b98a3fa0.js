import{_ as s,o as a,c as n,Q as l}from"./chunks/framework.281e52d7.js";const d=JSON.parse('{"title":"Qiankun","description":"","frontmatter":{},"headers":[],"relativePath":"microfe/qiankun.md","filePath":"microfe/qiankun.md","lastUpdated":null}'),p={name:"microfe/qiankun.md"},o=l(`<h1 id="qiankun" tabindex="-1">Qiankun <a class="header-anchor" href="#qiankun" aria-label="Permalink to &quot;Qiankun&quot;">​</a></h1><h2 id="开始" tabindex="-1">开始 <a class="header-anchor" href="#开始" aria-label="Permalink to &quot;开始&quot;">​</a></h2><p>众所周知众多微前端方案优缺点并存，选型过程中尽量扬长避短，选择合适的才能事半功倍。</p><p>而 qiankun 凭借社区繁荣而被大多数公司设为首选</p><h3 id="主要优点" tabindex="-1">主要优点 <a class="header-anchor" href="#主要优点" aria-label="Permalink to &quot;主要优点&quot;">​</a></h3><ul><li>解耦，子项目独立开发</li><li>技术栈无关</li><li>并行开发</li><li>独立部署</li></ul><h3 id="主要挑战" tabindex="-1">主要挑战 <a class="header-anchor" href="#主要挑战" aria-label="Permalink to &quot;主要挑战&quot;">​</a></h3><ul><li>性能问题，不同框架子应用的加载运行可能导致性能问题</li><li>一致性，主要是 ui 设计、操作体验等方面</li><li>状态共享，微前端应用之间共享状态比较复杂，需要使用特殊的工具或模式</li><li>复杂性，本身所带来的问题也导致了一些复杂，比如静态资源的处理</li><li>安全性，跨域风险</li></ul><h2 id="qiankun-常见问题" tabindex="-1">qiankun 常见问题 <a class="header-anchor" href="#qiankun-常见问题" aria-label="Permalink to &quot;qiankun 常见问题&quot;">​</a></h2><h3 id="_1、qiankun-工作原理" tabindex="-1">1、qiankun 工作原理 <a class="header-anchor" href="#_1、qiankun-工作原理" aria-label="Permalink to &quot;1、qiankun 工作原理&quot;">​</a></h3><ul><li>基于 single-spa</li><li>应用加载： qiankun 通过动态创建 script 标签方式加载子应用的入口文件，加载完毕会执行子应用暴露出来的生命周期函数</li><li>生命周期： 子应用需要暴露 bootstrap 、 mount 、 unmount 三个生命周期</li><li>沙箱隔离： qiankun 通过 Proxy 对象创建一个 js 沙箱，用于隔离子应用的全局变量，防止子应用之间的全局变量污染</li><li>样式隔离： qiankun 通过动态添加移除 style 标签的方式实现样式隔离，子应用启动时加载，卸载时移除</li><li>通信机制： 提供全局通信机制，允许子应用之间进行通信</li></ul><h3 id="_2、qiankun-中如何处理子应用的静态资源加载问题" tabindex="-1">2、qiankun 中如何处理子应用的静态资源加载问题 <a class="header-anchor" href="#_2、qiankun-中如何处理子应用的静态资源加载问题" aria-label="Permalink to &quot;2、qiankun 中如何处理子应用的静态资源加载问题&quot;">​</a></h3><h4 id="_1、使用公共路径" tabindex="-1">1、使用公共路径 <a class="header-anchor" href="#_1、使用公共路径" aria-label="Permalink to &quot;1、使用公共路径&quot;">​</a></h4><p>所有的静态资源加上前缀，使用绝对路径。但不是优解，折腾</p><h4 id="_2、劫持标签插入函数" tabindex="-1">2、劫持标签插入函数 <a class="header-anchor" href="#_2、劫持标签插入函数" aria-label="Permalink to &quot;2、劫持标签插入函数&quot;">​</a></h4><ul><li>对 html 中已有的 img/audio/video 等标签， qiankun 支持重写 getTemplate 函数，可以将入口文件 index.html 中的静态资源路径替换掉</li><li>对于动态插入 img/audio/video 等标签，劫持 appendChild 、 innerHTML 、 insertBefore 等事件，将资源的相对路径替换成绝对路径</li></ul><p>例如处理模板时，代码示例如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 微前端启动</span></span>
<span class="line"><span style="color:#B392F0;">start</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getTemplate</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">tpl</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">...</span><span style="color:#FFAB70;">rest</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">// 应该使用正则匹配，这里只是示例</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> tpl.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;img src=&quot;./img/1.png&quot; /&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;img src=&quot;http://example/img/1.png&quot; /&gt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 微前端启动</span></span>
<span class="line"><span style="color:#6F42C1;">start</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getTemplate</span><span style="color:#24292E;">(</span><span style="color:#E36209;">tpl</span><span style="color:#24292E;">, </span><span style="color:#D73A49;">...</span><span style="color:#E36209;">rest</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">// 应该使用正则匹配，这里只是示例</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> tpl.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;img src=&quot;./img/1.png&quot; /&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;img src=&quot;http://example/img/1.png&quot; /&gt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span></code></pre></div><p>对于动态插入的标签，劫持函数，注入前缀</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">beforeMount</span><span style="color:#E1E4E8;">: </span><span style="color:#FFAB70;">app</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (app.name </span><span style="color:#F97583;">===</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;appName&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">$</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">html</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">value</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">str</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> value.</span><span style="color:#B392F0;">replace</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;&lt;img src=&quot;./img/1.png&quot; /&gt;&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;&lt;img src=&quot;http://example/img/1.png&quot; /&gt;&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.[</span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">].innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> str</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">beforeMount</span><span style="color:#24292E;">: </span><span style="color:#E36209;">app</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (app.name </span><span style="color:#D73A49;">===</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;appName&#39;</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">$</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">html</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">value</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">str</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> value.</span><span style="color:#6F42C1;">replace</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;&lt;img src=&quot;./img/1.png&quot; /&gt;&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;&lt;img src=&quot;http://example/img/1.png&quot; /&gt;&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.[</span><span style="color:#005CC5;">0</span><span style="color:#24292E;">].innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> str</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="_3、给-jq-项目加上打包工具" tabindex="-1">3、给 jq 项目加上打包工具 <a class="header-anchor" href="#_3、给-jq-项目加上打包工具" aria-label="Permalink to &quot;3、给 jq 项目加上打包工具&quot;">​</a></h4><p>不折腾</p><h4 id="_4、使用-iframe-嵌入老项目" tabindex="-1">4、使用 iframe 嵌入老项目 <a class="header-anchor" href="#_4、使用-iframe-嵌入老项目" aria-label="Permalink to &quot;4、使用 iframe 嵌入老项目&quot;">​</a></h4><h3 id="_3、简述-qiankun-的-start-函数的作用和参数" tabindex="-1">3、简述 qiankun 的 start 函数的作用和参数 <a class="header-anchor" href="#_3、简述-qiankun-的-start-函数的作用和参数" aria-label="Permalink to &quot;3、简述 qiankun 的 start 函数的作用和参数&quot;">​</a></h3><ul><li>prefetch ： 预加载模式 <ul><li>true ，默认值，主应用 start 之后即开始预加载所有子应用的静态资源</li><li>false</li><li>all ， 无论子应用是否激活，主应用 start 之后即开始预加载所有子应用的静态资源</li><li>popstate ， 只有路由切换时才会去预加载对应子应用的静态资源</li></ul></li><li>sandbox ： 沙箱模式 <ul><li>true ， 默认值</li><li>false</li><li>{ strictStyleIsolation: true } 启用严格的样式隔离模式，即子应用的样式会被完全隔离，不会影响其他子应用和主应用</li></ul></li><li>singular ： 是否为单例模式 <ul><li>true ，默认值，即一次只有一个子应用处于激活状态</li><li>false ，可同时激活多个子应用</li></ul></li><li>fetch ： 自定义的 fetch 方法，用于加载子应用的静态资源</li></ul><h3 id="_4、js-沙箱不能解决的-js-污染问题" tabindex="-1">4、js 沙箱不能解决的 js 污染问题 <a class="header-anchor" href="#_4、js-沙箱不能解决的-js-污染问题" aria-label="Permalink to &quot;4、js 沙箱不能解决的 js 污染问题&quot;">​</a></h3><p>qiankun 的 js 沙箱主要时通过代理 window 对象来实现的，但给 body 标签添加点击事件时， js 沙箱并不能消除它的影响。</p><p>此时我们应自觉避免直接操作 window 和 document 对象，必须操作时应当及时清理掉这些全局事件和全局变量，例如代码如下</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 某个应用的处理点击事件</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">handleClick</span><span style="color:#E1E4E8;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 挂载应用时注册</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">addEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, handleClick)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 卸载应用时移除</span></span>
<span class="line"><span style="color:#E1E4E8;">  window.</span><span style="color:#B392F0;">removeEventListener</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;click&#39;</span><span style="color:#E1E4E8;">, handleClick);</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 某个应用的处理点击事件</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">handleClick</span><span style="color:#24292E;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 挂载应用时注册</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">addEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, handleClick)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unmount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 卸载应用时移除</span></span>
<span class="line"><span style="color:#24292E;">  window.</span><span style="color:#6F42C1;">removeEventListener</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;click&#39;</span><span style="color:#24292E;">, handleClick);</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_5、qiankun-如何实现-keep-alive-的需求" tabindex="-1">5、qiankun 如何实现 keep-alive 的需求 <a class="header-anchor" href="#_5、qiankun-如何实现-keep-alive-的需求" aria-label="Permalink to &quot;5、qiankun 如何实现 keep-alive 的需求&quot;">​</a></h3><p>qiankun 在子应用卸载时会将环境还原到子应用加载前的状态，以防止子应用对全局的污染，这种设计理念和 keep-alive 的需求是相悖的。</p><h4 id="在生命周期函数中保存数据" tabindex="-1">在生命周期函数中保存数据 <a class="header-anchor" href="#在生命周期函数中保存数据" aria-label="Permalink to &quot;在生命周期函数中保存数据&quot;">​</a></h4><p>想要在 qiankun 中实现 keep-alive 也只能弯道实现，例如在子应用的生命周期中保存和恢复子应用的状态，但也仅限是数据而已，并不能保留子应用的 dom 状态</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例代码</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> savedState</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">mount</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">props</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 恢复子应用的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (savedState) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#B392F0;">restoreState</span><span style="color:#E1E4E8;">(savedState);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">unmount</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 保存子应用的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  savedState </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveState</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">saveState</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 保存子应用的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这个函数的实现取决于你的应用</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">restoreState</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">state</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 恢复子应用的状态</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;">// 这个函数的实现取决于你的应用</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例代码</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> savedState</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">mount</span><span style="color:#24292E;">(</span><span style="color:#E36209;">props</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 恢复子应用的状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (savedState) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6F42C1;">restoreState</span><span style="color:#24292E;">(savedState);</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">async</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">unmount</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 保存子应用的状态</span></span>
<span class="line"><span style="color:#24292E;">  savedState </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveState</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">saveState</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 保存子应用的状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个函数的实现取决于你的应用</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">restoreState</span><span style="color:#24292E;">(</span><span style="color:#E36209;">state</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 恢复子应用的状态</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6A737D;">// 这个函数的实现取决于你的应用</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h4 id="手动-loadmicroapp-display-none-子应用" tabindex="-1">手动 loadMicroApp + display: none 子应用 <a class="header-anchor" href="#手动-loadmicroapp-display-none-子应用" aria-label="Permalink to &quot;手动 loadMicroApp + display: none 子应用&quot;">​</a></h4><p>手动加载子应用，不直接卸载，直接隐藏 dom</p><h3 id="_6、qiankun-和-iframe-优劣选择" tabindex="-1">6、qiankun 和 iframe 优劣选择 <a class="header-anchor" href="#_6、qiankun-和-iframe-优劣选择" aria-label="Permalink to &quot;6、qiankun 和 iframe 优劣选择&quot;">​</a></h3><p>两者都是很成熟的微前端解决方案， qiankun 功能强大，应对复杂场景更灵活， iframe 使用简单，无兼容问题</p><p>基于不同的使用场景选择，对于现代项目，都是使用 vue 、 react 等框架开发，那 qiankun 可能是更好的选择，虽然需要一些接入改造成本，但它拥有更好的用户体验和开发效率。</p><p>如果是传统 jquery 项目则优先考虑 iframe 为佳，但需考虑通信问题、性能问题</p><h3 id="_7、qiankun-多个子应用调试问题" tabindex="-1">7、qiankun 多个子应用调试问题 <a class="header-anchor" href="#_7、qiankun-多个子应用调试问题" aria-label="Permalink to &quot;7、qiankun 多个子应用调试问题&quot;">​</a></h3><p>对于如何同时启动多个子应用，可以考虑使用 npm-run-all 这个工具来串行或并行来执行你的脚本。</p><p>下载 npm-run-all</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">install</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">--save-dev</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">npm-run-all</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6F42C1;">npm</span><span style="color:#24292E;"> </span><span style="color:#032F62;">install</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">--save-dev</span><span style="color:#24292E;"> </span><span style="color:#032F62;">npm-run-all</span></span></code></pre></div><p>package.json 添加脚本</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#9ECBFF;">&quot;scripts&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start:app1&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;npm start --prefix ./app1&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start:app2&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;npm start --prefix ./app2&quot;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;start:all&quot;</span><span style="color:#E1E4E8;">: </span><span style="color:#9ECBFF;">&quot;npm-run-all start:app1 start:app2&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#032F62;">&quot;scripts&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start:app1&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;npm start --prefix ./app1&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start:app2&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;npm start --prefix ./app2&quot;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;start:all&quot;</span><span style="color:#24292E;">: </span><span style="color:#032F62;">&quot;npm-run-all start:app1 start:app2&quot;</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><h3 id="_8、qiankun如何实现-css-隔离-优缺点是什么-还有其他方案吗" tabindex="-1">8、qiankun如何实现 css 隔离，优缺点是什么，还有其他方案吗 <a class="header-anchor" href="#_8、qiankun如何实现-css-隔离-优缺点是什么-还有其他方案吗" aria-label="Permalink to &quot;8、qiankun如何实现 css 隔离，优缺点是什么，还有其他方案吗&quot;">​</a></h3><p>qiankun 主要使用 shadow dom 来实现 css 隔离</p><ol><li>shadow dom 可以创建一个封闭的 dom 结构，这个 dom 对外部隔离，包括 css ， qiankun 在挂载子应用时，会将子应用的 html 元素挂载到 shadow dom 上，从而实现 css 隔离</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// qiankun使用Shadow DOM挂载子应用</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">container</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> document.</span><span style="color:#B392F0;">getElementById</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;container&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">shadowRoot</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> container.</span><span style="color:#B392F0;">attachShadow</span><span style="color:#E1E4E8;">({ mode: </span><span style="color:#9ECBFF;">&#39;open&#39;</span><span style="color:#E1E4E8;"> })</span></span>
<span class="line"><span style="color:#E1E4E8;">shadowRoot.innerHTML </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;&lt;div id=&quot;subapp-container&quot;&gt;&lt;/div&gt;&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// qiankun使用Shadow DOM挂载子应用</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">container</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> document.</span><span style="color:#6F42C1;">getElementById</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;container&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">shadowRoot</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> container.</span><span style="color:#6F42C1;">attachShadow</span><span style="color:#24292E;">({ mode: </span><span style="color:#032F62;">&#39;open&#39;</span><span style="color:#24292E;"> })</span></span>
<span class="line"><span style="color:#24292E;">shadowRoot.innerHTML </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;&lt;div id=&quot;subapp-container&quot;&gt;&lt;/div&gt;&#39;</span></span></code></pre></div><p>shadow dom 隔离方案可能会有兼容性问题。</p><ol start="2"><li>css module 样式隔离</li><li>BEM 命名规范隔离</li></ol><h3 id="_9、qiankun-项目间通信" tabindex="-1">9、qiankun 项目间通信 <a class="header-anchor" href="#_9、qiankun-项目间通信" aria-label="Permalink to &quot;9、qiankun 项目间通信&quot;">​</a></h3><ul><li>Actions 通信， qiankun 官方提供的通信方式 <ul><li>setGlobalState 设置 globalState</li><li>通过 onGlobalStateChange 和 offGlobalStateChange 注册和取消观察全局变量从而实现通信</li></ul></li><li>自己实现一套通信机制 <ul><li>使用原生的 CustomEvent 或类似的第三方库来派发和监听自定义事件</li><li>定义一个全局变量和 on 、 emit 方法</li></ul></li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// 示例代码</span></span>
<span class="line"><span style="color:#E1E4E8;">window.globalEvent </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  events: {},</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.events[event]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.events[event].</span><span style="color:#B392F0;">forEach</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">callback</span><span style="color:#E1E4E8;">(data));</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">callback</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.events[event]) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.events[event] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [];</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">this</span><span style="color:#E1E4E8;">.events[event].</span><span style="color:#B392F0;">push</span><span style="color:#E1E4E8;">(callback);</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// 示例代码</span></span>
<span class="line"><span style="color:#24292E;">window.globalEvent </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  events: {},</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">emit</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">data</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.events[event]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#D73A49;">return</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.events[event].</span><span style="color:#6F42C1;">forEach</span><span style="color:#24292E;">(</span><span style="color:#E36209;">callback</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">callback</span><span style="color:#24292E;">(data));</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">on</span><span style="color:#24292E;">(</span><span style="color:#E36209;">event</span><span style="color:#24292E;">, </span><span style="color:#E36209;">callback</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (</span><span style="color:#D73A49;">!</span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.events[event]) {</span></span>
<span class="line"><span style="color:#24292E;">      </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.events[event] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [];</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">this</span><span style="color:#24292E;">.events[event].</span><span style="color:#6F42C1;">push</span><span style="color:#24292E;">(callback);</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h3 id="_10、子项路由目的-hash-和-history-如何处理" tabindex="-1">10、子项路由目的 hash 和 history 如何处理 <a class="header-anchor" href="#_10、子项路由目的-hash-和-history-如何处理" aria-label="Permalink to &quot;10、子项路由目的 hash 和 history 如何处理&quot;">​</a></h3><p>qiankun 推荐使用 history 模式，子应用之间的跳转也是通过主应用的 router 对象或原生的 history 对象进行。</p><ul><li>主应用使用 history 模式，子应用可使用 hash 和 history 模式，可使用 router 对象跳转。</li><li>主应用使用 hash 模式，子应用跳转就需要借助原生的 history 对象了。</li></ul><h3 id="_11、qiankun-中应用之间如何复用依赖-npm-包除外" tabindex="-1">11、qiankun 中应用之间如何复用依赖， npm 包除外 <a class="header-anchor" href="#_11、qiankun-中应用之间如何复用依赖-npm-包除外" aria-label="Permalink to &quot;11、qiankun 中应用之间如何复用依赖， npm 包除外&quot;">​</a></h3><ul><li>公共依赖指定为外部依赖，打包时配置 externals 选项</li><li>统一的 cdn 文件，加载时先从缓存中获取</li><li>子应用资源设置 script 标签的 ignore 属性，主应用加载时会忽略，子应用独立运行时会正常加载</li></ul><h3 id="_12、qiankun-的资源加载机制-import-html-entry" tabindex="-1">12、qiankun 的资源加载机制（import-html-entry） <a class="header-anchor" href="#_12、qiankun-的资源加载机制-import-html-entry" aria-label="Permalink to &quot;12、qiankun 的资源加载机制（import-html-entry）&quot;">​</a></h3><p>import-html-entry 是qiankun 框架中用于加载子应用的 HTML 入口文件的工具函数，可以方便的将子应用的 html 入口作为模块加载。它实现了以下功能</p><ul><li>加载 html 入口文件： import-html-entry 会通过创建一个 link 标签来加载子应用的 html 入口文件，确保子应用的资源得到正确加载</li><li>解析 html 入口文件： 解析入口文件内容，提取出子应用的 js 和 css 资源的 url</li><li>动态加载 js 和 css 资源： 动态创建 script 和 link ，按照正确顺序加载子应用资源</li><li>创建沙箱环境： 在加载子应用的 js 资源时，创建一个沙箱环境，用于隔离 js</li><li>返回子应用的入口模块： 它返回一个函数，可以在主应用中调用以加载和启动子应用</li></ul><h3 id="_13、几种微前端框架的优缺点" tabindex="-1">13、几种微前端框架的优缺点 <a class="header-anchor" href="#_13、几种微前端框架的优缺点" aria-label="Permalink to &quot;13、几种微前端框架的优缺点&quot;">​</a></h3><h4 id="qiankun-1" tabindex="-1">qiankun <a class="header-anchor" href="#qiankun-1" aria-label="Permalink to &quot;qiankun&quot;">​</a></h4><ul><li>优点 <ul><li>降低应用改造成本，通过 html entry 方式引入子应用</li><li>提供完备的 js 、 css 沙箱方案</li><li>支持静态资源预加载</li><li>社区活跃</li></ul></li><li>缺点 <ul><li>适配成本较高，包括工程化、生命周期、静态资源路径补全、路由等方面的适配</li><li>无法同时激活多个子应用，不支持子应用保活</li><li>不支持 vite 等 esmodule 脚本呢运行，需要配合插件</li></ul></li></ul><h4 id="micro-app" tabindex="-1">micro-app <a class="header-anchor" href="#micro-app" aria-label="Permalink to &quot;micro-app&quot;">​</a></h4><ul><li>优点 <ul><li>使用 webcomponent 加载子应用</li><li>复用大量验证过的 qiankun 沙箱机制，提高框架可靠性</li><li>支持子应用保活</li><li>降低子应用改造成本，提供静态资源预加载能力</li></ul></li><li>缺点 <ul><li>多应用激活后也无法保持各个子应用的路由状态，刷新后丢失</li><li>css 沙箱无法完全隔离，需配合命名规范</li><li>支持 vite 运行，但必须使用 plugin 改在子应用，且 js 无法做沙箱隔离</li><li>对于不支持 webcomponent 的浏览器未做降级处理</li></ul></li></ul><h4 id="emp-和-vite-plugin-federation" tabindex="-1">EMP 和 vite-plugin-federation <a class="header-anchor" href="#emp-和-vite-plugin-federation" aria-label="Permalink to &quot;EMP 和 vite-plugin-federation&quot;">​</a></h4><ul><li>优点 <ul><li>webpack 模块联邦所有子应用依赖解耦</li><li>支持应用间去中心化调用、共享模块</li><li>支持模块远程 ts 支持</li></ul></li><li>缺点 <ul><li>无有效的 js 和 css 沙箱</li><li>无子应用保活、多应用激活方案</li></ul></li></ul><h4 id="wujie" tabindex="-1">wujie <a class="header-anchor" href="#wujie" aria-label="Permalink to &quot;wujie&quot;">​</a></h4><ul><li>优点 <ul><li>基于 webcomponent 容器和 iframe 沙箱，充分解决了适配成本、样式隔离、运行性能、应用通信、保活、多活、vite支持、状态共享等问题</li><li>对于不支持 proxy + webcomponent 的浏览器，提供 Object.defineProperty + iframe 的降级方案</li></ul></li><li>缺点 <ul><li>多活应用性能问题</li><li>iframe 通信问题</li></ul></li></ul>`,72),e=[o];function t(c,r,i,E,y,u){return a(),n("div",null,e)}const F=s(p,[["render",t]]);export{d as __pageData,F as default};
